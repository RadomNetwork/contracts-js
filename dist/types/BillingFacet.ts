/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type ProductStruct = { productType: BigNumberish; data: BytesLike };

export type ProductStructOutput = [number, string] & {
  productType: number;
  data: string;
};

export type OrderStruct = {
  nonce: BigNumberish;
  customer: string;
  seller: string;
  products: ProductStruct[];
};

export type OrderStructOutput = [
  BigNumber,
  string,
  string,
  ProductStructOutput[]
] & {
  nonce: BigNumber;
  customer: string;
  seller: string;
  products: ProductStructOutput[];
};

export type SubscriptionResponseStruct = {
  customer: string;
  seller: string;
  productId: BigNumberish;
  productType: BigNumberish;
  subscriptionId: BigNumberish;
  subscriptionStart: BigNumberish;
  authenticationString: BytesLike;
  subscriptionEnd: BigNumberish;
  indexRunsOutOfFunds: BigNumberish;
  pricing: BigNumberish;
  chargingInterval: BigNumberish;
  isActive: boolean;
  cancelled: boolean;
  revoked: boolean;
  token: string;
};

export type SubscriptionResponseStructOutput = [
  string,
  string,
  BigNumber,
  number,
  BigNumber,
  number,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  number,
  boolean,
  boolean,
  boolean,
  string
] & {
  customer: string;
  seller: string;
  productId: BigNumber;
  productType: number;
  subscriptionId: BigNumber;
  subscriptionStart: number;
  authenticationString: string;
  subscriptionEnd: BigNumber;
  indexRunsOutOfFunds: BigNumber;
  pricing: BigNumber;
  chargingInterval: number;
  isActive: boolean;
  cancelled: boolean;
  revoked: boolean;
  token: string;
};

export type PaymentStruct = {
  nonce: BigNumberish;
  price: BigNumberish;
  token: string;
  customer: string;
  seller: string;
};

export type PaymentStructOutput = [
  BigNumber,
  BigNumber,
  string,
  string,
  string
] & {
  nonce: BigNumber;
  price: BigNumber;
  token: string;
  customer: string;
  seller: string;
};

export type UpdateAddOnsOrderStruct = {
  subscriptionId: BigNumberish;
  price: BigNumberish;
  addOns: BigNumberish[];
};

export type UpdateAddOnsOrderStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber[]
] & { subscriptionId: BigNumber; price: BigNumber; addOns: BigNumber[] };

export interface BillingFacetInterface extends utils.Interface {
  functions: {
    "cancelSubscription(uint64)": FunctionFragment;
    "generateOrderId((uint256,address,address,(uint32,bytes)[]))": FunctionFragment;
    "getPaginatedSubscriptions(address,uint64,uint64)": FunctionFragment;
    "getPurchasedSubscriptions(address,uint64,uint64)": FunctionFragment;
    "getSoldSubscriptions(address,uint64,uint64)": FunctionFragment;
    "getSubscription(uint64)": FunctionFragment;
    "order((uint256,address,address,(uint32,bytes)[]),bool)": FunctionFragment;
    "pay((uint256,uint256,address,address,address),bool)": FunctionFragment;
    "replaceOrderConfig((uint256,address,address,(uint32,bytes)[]))": FunctionFragment;
    "revokeSubscription(uint64)": FunctionFragment;
    "updateAddOnsOrder((uint64,uint256,uint64[]))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cancelSubscription",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "generateOrderId",
    values: [OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaginatedSubscriptions",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPurchasedSubscriptions",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSoldSubscriptions",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscription",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "order",
    values: [OrderStruct, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "pay",
    values: [PaymentStruct, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "replaceOrderConfig",
    values: [OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeSubscription",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAddOnsOrder",
    values: [UpdateAddOnsOrderStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateOrderId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaginatedSubscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPurchasedSubscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSoldSubscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "order", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "replaceOrderConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAddOnsOrder",
    data: BytesLike
  ): Result;

  events: {
    "OrderConfigUpdated(bytes32)": EventFragment;
    "OrderPurchased(bytes32,tuple)": EventFragment;
    "PaymentSuccessful(bytes32)": EventFragment;
    "SubscriptionAddOnsUpdated(uint64,uint64,uint64[])": EventFragment;
    "SubscriptionCancelled(uint64,uint64)": EventFragment;
    "SubscriptionCreated(uint64,uint64)": EventFragment;
    "SubscriptionRevoked(uint64,uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OrderConfigUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderPurchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentSuccessful"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionAddOnsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionRevoked"): EventFragment;
}

export type OrderConfigUpdatedEvent = TypedEvent<[string], { orderId: string }>;

export type OrderConfigUpdatedEventFilter =
  TypedEventFilter<OrderConfigUpdatedEvent>;

export type OrderPurchasedEvent = TypedEvent<
  [string, OrderStructOutput],
  { orderId: string; orderData: OrderStructOutput }
>;

export type OrderPurchasedEventFilter = TypedEventFilter<OrderPurchasedEvent>;

export type PaymentSuccessfulEvent = TypedEvent<
  [string],
  { paymentId: string }
>;

export type PaymentSuccessfulEventFilter =
  TypedEventFilter<PaymentSuccessfulEvent>;

export type SubscriptionAddOnsUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber[]],
  {
    serviceSubscriptionId: BigNumber;
    productId: BigNumber;
    addOns: BigNumber[];
  }
>;

export type SubscriptionAddOnsUpdatedEventFilter =
  TypedEventFilter<SubscriptionAddOnsUpdatedEvent>;

export type SubscriptionCancelledEvent = TypedEvent<
  [BigNumber, BigNumber],
  { serviceSubscriptionId: BigNumber; productId: BigNumber }
>;

export type SubscriptionCancelledEventFilter =
  TypedEventFilter<SubscriptionCancelledEvent>;

export type SubscriptionCreatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { subscriptionId: BigNumber; productId: BigNumber }
>;

export type SubscriptionCreatedEventFilter =
  TypedEventFilter<SubscriptionCreatedEvent>;

export type SubscriptionRevokedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { serviceSubscriptionId: BigNumber; productId: BigNumber }
>;

export type SubscriptionRevokedEventFilter =
  TypedEventFilter<SubscriptionRevokedEvent>;

export interface BillingFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BillingFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelSubscription(
      subscriptionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    generateOrderId(
      orderData: OrderStruct,
      overrides?: CallOverrides
    ): Promise<[string] & { orderId: string }>;

    getPaginatedSubscriptions(
      orgId: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[SubscriptionResponseStructOutput[], BigNumber]>;

    getPurchasedSubscriptions(
      orgId: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [SubscriptionResponseStructOutput[], BigNumber] & { cursor: BigNumber }
    >;

    getSoldSubscriptions(
      orgId: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [SubscriptionResponseStructOutput[], BigNumber] & { cursor: BigNumber }
    >;

    getSubscription(
      subscriptionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[SubscriptionResponseStructOutput]>;

    order(
      orderData: OrderStruct,
      fromRadomBalance: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pay(
      payment: PaymentStruct,
      fromRadomBalance: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    replaceOrderConfig(
      orderData: OrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeSubscription(
      subscriptionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateAddOnsOrder(
      updateData: UpdateAddOnsOrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  cancelSubscription(
    subscriptionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  generateOrderId(
    orderData: OrderStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getPaginatedSubscriptions(
    orgId: string,
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[SubscriptionResponseStructOutput[], BigNumber]>;

  getPurchasedSubscriptions(
    orgId: string,
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [SubscriptionResponseStructOutput[], BigNumber] & { cursor: BigNumber }
  >;

  getSoldSubscriptions(
    orgId: string,
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [SubscriptionResponseStructOutput[], BigNumber] & { cursor: BigNumber }
  >;

  getSubscription(
    subscriptionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<SubscriptionResponseStructOutput>;

  order(
    orderData: OrderStruct,
    fromRadomBalance: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pay(
    payment: PaymentStruct,
    fromRadomBalance: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  replaceOrderConfig(
    orderData: OrderStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeSubscription(
    subscriptionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateAddOnsOrder(
    updateData: UpdateAddOnsOrderStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelSubscription(
      subscriptionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    generateOrderId(
      orderData: OrderStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getPaginatedSubscriptions(
      orgId: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[SubscriptionResponseStructOutput[], BigNumber]>;

    getPurchasedSubscriptions(
      orgId: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [SubscriptionResponseStructOutput[], BigNumber] & { cursor: BigNumber }
    >;

    getSoldSubscriptions(
      orgId: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [SubscriptionResponseStructOutput[], BigNumber] & { cursor: BigNumber }
    >;

    getSubscription(
      subscriptionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<SubscriptionResponseStructOutput>;

    order(
      orderData: OrderStruct,
      fromRadomBalance: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    pay(
      payment: PaymentStruct,
      fromRadomBalance: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    replaceOrderConfig(
      orderData: OrderStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeSubscription(
      subscriptionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAddOnsOrder(
      updateData: UpdateAddOnsOrderStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OrderConfigUpdated(bytes32)"(
      orderId?: BytesLike | null
    ): OrderConfigUpdatedEventFilter;
    OrderConfigUpdated(
      orderId?: BytesLike | null
    ): OrderConfigUpdatedEventFilter;

    "OrderPurchased(bytes32,tuple)"(
      orderId?: BytesLike | null,
      orderData?: null
    ): OrderPurchasedEventFilter;
    OrderPurchased(
      orderId?: BytesLike | null,
      orderData?: null
    ): OrderPurchasedEventFilter;

    "PaymentSuccessful(bytes32)"(
      paymentId?: null
    ): PaymentSuccessfulEventFilter;
    PaymentSuccessful(paymentId?: null): PaymentSuccessfulEventFilter;

    "SubscriptionAddOnsUpdated(uint64,uint64,uint64[])"(
      serviceSubscriptionId?: BigNumberish | null,
      productId?: BigNumberish | null,
      addOns?: null
    ): SubscriptionAddOnsUpdatedEventFilter;
    SubscriptionAddOnsUpdated(
      serviceSubscriptionId?: BigNumberish | null,
      productId?: BigNumberish | null,
      addOns?: null
    ): SubscriptionAddOnsUpdatedEventFilter;

    "SubscriptionCancelled(uint64,uint64)"(
      serviceSubscriptionId?: BigNumberish | null,
      productId?: BigNumberish | null
    ): SubscriptionCancelledEventFilter;
    SubscriptionCancelled(
      serviceSubscriptionId?: BigNumberish | null,
      productId?: BigNumberish | null
    ): SubscriptionCancelledEventFilter;

    "SubscriptionCreated(uint64,uint64)"(
      subscriptionId?: BigNumberish | null,
      productId?: BigNumberish | null
    ): SubscriptionCreatedEventFilter;
    SubscriptionCreated(
      subscriptionId?: BigNumberish | null,
      productId?: BigNumberish | null
    ): SubscriptionCreatedEventFilter;

    "SubscriptionRevoked(uint64,uint64)"(
      serviceSubscriptionId?: BigNumberish | null,
      productId?: BigNumberish | null
    ): SubscriptionRevokedEventFilter;
    SubscriptionRevoked(
      serviceSubscriptionId?: BigNumberish | null,
      productId?: BigNumberish | null
    ): SubscriptionRevokedEventFilter;
  };

  estimateGas: {
    cancelSubscription(
      subscriptionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    generateOrderId(
      orderData: OrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaginatedSubscriptions(
      orgId: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPurchasedSubscriptions(
      orgId: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSoldSubscriptions(
      orgId: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscription(
      subscriptionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    order(
      orderData: OrderStruct,
      fromRadomBalance: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pay(
      payment: PaymentStruct,
      fromRadomBalance: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    replaceOrderConfig(
      orderData: OrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeSubscription(
      subscriptionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateAddOnsOrder(
      updateData: UpdateAddOnsOrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelSubscription(
      subscriptionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    generateOrderId(
      orderData: OrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPaginatedSubscriptions(
      orgId: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPurchasedSubscriptions(
      orgId: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSoldSubscriptions(
      orgId: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubscription(
      subscriptionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    order(
      orderData: OrderStruct,
      fromRadomBalance: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pay(
      payment: PaymentStruct,
      fromRadomBalance: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    replaceOrderConfig(
      orderData: OrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeSubscription(
      subscriptionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateAddOnsOrder(
      updateData: UpdateAddOnsOrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
