/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type SubscriptionResponseStruct = {
  customer: string;
  seller: string;
  productId: BigNumberish;
  productType: BigNumberish;
  subscriptionId: BigNumberish;
  subscriptionStart: BigNumberish;
  authenticationString: BytesLike;
  subscriptionEnd: BigNumberish;
  indexRunsOutOfFunds: BigNumberish;
  pricing: BigNumberish;
  chargingInterval: BigNumberish;
  isActive: boolean;
  cancelled: boolean;
  revoked: boolean;
  token: string;
};

export type SubscriptionResponseStructOutput = [
  string,
  string,
  BigNumber,
  number,
  BigNumber,
  number,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  number,
  boolean,
  boolean,
  boolean,
  string
] & {
  customer: string;
  seller: string;
  productId: BigNumber;
  productType: number;
  subscriptionId: BigNumber;
  subscriptionStart: number;
  authenticationString: string;
  subscriptionEnd: BigNumber;
  indexRunsOutOfFunds: BigNumber;
  pricing: BigNumber;
  chargingInterval: number;
  isActive: boolean;
  cancelled: boolean;
  revoked: boolean;
  token: string;
};

export interface ISubscriptionInterface extends utils.Interface {
  functions: {
    "cancelSubscription(uint64)": FunctionFragment;
    "getPurchasedSubscriptions(address,uint64,uint64)": FunctionFragment;
    "getSoldSubscriptions(address,uint64,uint64)": FunctionFragment;
    "getSubscription(uint64)": FunctionFragment;
    "revokeSubscription(uint64)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cancelSubscription",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPurchasedSubscriptions",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSoldSubscriptions",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscription",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeSubscription",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPurchasedSubscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSoldSubscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeSubscription",
    data: BytesLike
  ): Result;

  events: {
    "SubscriptionAddOnsUpdated(uint64,uint64,uint64[])": EventFragment;
    "SubscriptionCancelled(uint64,uint64)": EventFragment;
    "SubscriptionCreated(uint64,uint64)": EventFragment;
    "SubscriptionRevoked(uint64,uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SubscriptionAddOnsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionRevoked"): EventFragment;
}

export type SubscriptionAddOnsUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber[]],
  {
    serviceSubscriptionId: BigNumber;
    productId: BigNumber;
    addOns: BigNumber[];
  }
>;

export type SubscriptionAddOnsUpdatedEventFilter =
  TypedEventFilter<SubscriptionAddOnsUpdatedEvent>;

export type SubscriptionCancelledEvent = TypedEvent<
  [BigNumber, BigNumber],
  { serviceSubscriptionId: BigNumber; productId: BigNumber }
>;

export type SubscriptionCancelledEventFilter =
  TypedEventFilter<SubscriptionCancelledEvent>;

export type SubscriptionCreatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { subscriptionId: BigNumber; productId: BigNumber }
>;

export type SubscriptionCreatedEventFilter =
  TypedEventFilter<SubscriptionCreatedEvent>;

export type SubscriptionRevokedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { serviceSubscriptionId: BigNumber; productId: BigNumber }
>;

export type SubscriptionRevokedEventFilter =
  TypedEventFilter<SubscriptionRevokedEvent>;

export interface ISubscription extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISubscriptionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelSubscription(
      subscriptionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPurchasedSubscriptions(
      buyer: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [SubscriptionResponseStructOutput[], BigNumber] & {
        subscriptions: SubscriptionResponseStructOutput[];
        cursor: BigNumber;
      }
    >;

    getSoldSubscriptions(
      seller: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [SubscriptionResponseStructOutput[], BigNumber] & {
        subscriptions: SubscriptionResponseStructOutput[];
        cursor: BigNumber;
      }
    >;

    getSubscription(
      subscriptionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [SubscriptionResponseStructOutput] & {
        subscription: SubscriptionResponseStructOutput;
      }
    >;

    revokeSubscription(
      subscriptionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  cancelSubscription(
    subscriptionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPurchasedSubscriptions(
    buyer: string,
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [SubscriptionResponseStructOutput[], BigNumber] & {
      subscriptions: SubscriptionResponseStructOutput[];
      cursor: BigNumber;
    }
  >;

  getSoldSubscriptions(
    seller: string,
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [SubscriptionResponseStructOutput[], BigNumber] & {
      subscriptions: SubscriptionResponseStructOutput[];
      cursor: BigNumber;
    }
  >;

  getSubscription(
    subscriptionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<SubscriptionResponseStructOutput>;

  revokeSubscription(
    subscriptionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelSubscription(
      subscriptionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getPurchasedSubscriptions(
      buyer: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [SubscriptionResponseStructOutput[], BigNumber] & {
        subscriptions: SubscriptionResponseStructOutput[];
        cursor: BigNumber;
      }
    >;

    getSoldSubscriptions(
      seller: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [SubscriptionResponseStructOutput[], BigNumber] & {
        subscriptions: SubscriptionResponseStructOutput[];
        cursor: BigNumber;
      }
    >;

    getSubscription(
      subscriptionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<SubscriptionResponseStructOutput>;

    revokeSubscription(
      subscriptionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "SubscriptionAddOnsUpdated(uint64,uint64,uint64[])"(
      serviceSubscriptionId?: BigNumberish | null,
      productId?: BigNumberish | null,
      addOns?: null
    ): SubscriptionAddOnsUpdatedEventFilter;
    SubscriptionAddOnsUpdated(
      serviceSubscriptionId?: BigNumberish | null,
      productId?: BigNumberish | null,
      addOns?: null
    ): SubscriptionAddOnsUpdatedEventFilter;

    "SubscriptionCancelled(uint64,uint64)"(
      serviceSubscriptionId?: BigNumberish | null,
      productId?: BigNumberish | null
    ): SubscriptionCancelledEventFilter;
    SubscriptionCancelled(
      serviceSubscriptionId?: BigNumberish | null,
      productId?: BigNumberish | null
    ): SubscriptionCancelledEventFilter;

    "SubscriptionCreated(uint64,uint64)"(
      subscriptionId?: BigNumberish | null,
      productId?: BigNumberish | null
    ): SubscriptionCreatedEventFilter;
    SubscriptionCreated(
      subscriptionId?: BigNumberish | null,
      productId?: BigNumberish | null
    ): SubscriptionCreatedEventFilter;

    "SubscriptionRevoked(uint64,uint64)"(
      serviceSubscriptionId?: BigNumberish | null,
      productId?: BigNumberish | null
    ): SubscriptionRevokedEventFilter;
    SubscriptionRevoked(
      serviceSubscriptionId?: BigNumberish | null,
      productId?: BigNumberish | null
    ): SubscriptionRevokedEventFilter;
  };

  estimateGas: {
    cancelSubscription(
      subscriptionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPurchasedSubscriptions(
      buyer: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSoldSubscriptions(
      seller: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscription(
      subscriptionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeSubscription(
      subscriptionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelSubscription(
      subscriptionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPurchasedSubscriptions(
      buyer: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSoldSubscriptions(
      seller: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubscription(
      subscriptionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeSubscription(
      subscriptionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
