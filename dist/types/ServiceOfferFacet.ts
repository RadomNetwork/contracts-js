/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type PricingOptionStruct = {
  key: BytesLike;
  disabled: boolean;
  price: BigNumberish;
};

export type PricingOptionStructOutput = [string, boolean, BigNumber] & {
  key: string;
  disabled: boolean;
  price: BigNumber;
};

export type PricingInputStruct = {
  key: BytesLike;
  canBeUpdated: boolean;
  options: PricingOptionStruct[];
};

export type PricingInputStructOutput = [
  string,
  boolean,
  PricingOptionStructOutput[]
] & {
  key: string;
  canBeUpdated: boolean;
  options: PricingOptionStructOutput[];
};

export type ServiceOfferDataStruct = {
  configInputs: BytesLike[];
  whitelist: string[];
  tokenExchangeRates: BigNumberish[];
  tokens: string[];
  pricing: BigNumberish;
  title2: BytesLike;
  title1: BytesLike;
  publicKey: BytesLike;
  description: BytesLike;
  chargeInterval: BigNumberish;
  offerEnabled: boolean;
  whitelistEnabled: boolean;
  authenticationType: BigNumberish;
  paymentModel: BigNumberish;
  pricingInputs: PricingInputStruct[];
};

export type ServiceOfferDataStructOutput = [
  string[],
  string[],
  BigNumber[],
  string[],
  BigNumber,
  string,
  string,
  string,
  string,
  number,
  boolean,
  boolean,
  number,
  number,
  PricingInputStructOutput[]
] & {
  configInputs: string[];
  whitelist: string[];
  tokenExchangeRates: BigNumber[];
  tokens: string[];
  pricing: BigNumber;
  title2: string;
  title1: string;
  publicKey: string;
  description: string;
  chargeInterval: number;
  offerEnabled: boolean;
  whitelistEnabled: boolean;
  authenticationType: number;
  paymentModel: number;
  pricingInputs: PricingInputStructOutput[];
};

export type ServiceOfferResponseStruct = {
  configInputs: BytesLike[];
  whitelist: string[];
  tokenExchangeRates: BigNumberish[];
  tokens: string[];
  title2: BytesLike;
  title1: BytesLike;
  publicKey: BytesLike;
  description: BytesLike;
  pricing: BigNumberish;
  networkId: BytesLike;
  serviceOfferId: BigNumberish;
  chargeInterval: BigNumberish;
  offerEnabled: boolean;
  whitelistEnabled: boolean;
  authenticationType: BigNumberish;
  paymentModel: BigNumberish;
  pricingInputs: PricingInputStruct[];
};

export type ServiceOfferResponseStructOutput = [
  string[],
  string[],
  BigNumber[],
  string[],
  string,
  string,
  string,
  string,
  BigNumber,
  string,
  number,
  number,
  boolean,
  boolean,
  number,
  number,
  PricingInputStructOutput[]
] & {
  configInputs: string[];
  whitelist: string[];
  tokenExchangeRates: BigNumber[];
  tokens: string[];
  title2: string;
  title1: string;
  publicKey: string;
  description: string;
  pricing: BigNumber;
  networkId: string;
  serviceOfferId: number;
  chargeInterval: number;
  offerEnabled: boolean;
  whitelistEnabled: boolean;
  authenticationType: number;
  paymentModel: number;
  pricingInputs: PricingInputStructOutput[];
};

export type UpdateServiceOfferDataStruct = {
  dataToUpdate: ServiceOfferDataStruct;
  whitelistToRemove: string[];
  configInputsToRemove: BytesLike[];
  pricingInputsToRemove: BytesLike[];
};

export type UpdateServiceOfferDataStructOutput = [
  ServiceOfferDataStructOutput,
  string[],
  string[],
  string[]
] & {
  dataToUpdate: ServiceOfferDataStructOutput;
  whitelistToRemove: string[];
  configInputsToRemove: string[];
  pricingInputsToRemove: string[];
};

export interface ServiceOfferFacetInterface extends utils.Interface {
  functions: {
    "createServiceOffer((bytes32[],address[],uint256[],address[],uint256,bytes32,bytes32,bytes,bytes,uint32,bool,bool,uint8,uint8,(bytes31,bool,(bytes31,bool,uint256)[])[]))": FunctionFragment;
    "deleteServiceOffer(uint32)": FunctionFragment;
    "getPaginatedNetworkServiceOffers(bytes20,uint32,uint32)": FunctionFragment;
    "getPaginatedServiceOffers(uint32,uint32)": FunctionFragment;
    "getServiceOfferById(uint32)": FunctionFragment;
    "updateServiceOffer(uint32,((bytes32[],address[],uint256[],address[],uint256,bytes32,bytes32,bytes,bytes,uint32,bool,bool,uint8,uint8,(bytes31,bool,(bytes31,bool,uint256)[])[]),address[],bytes32[],bytes31[]))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createServiceOffer",
    values: [ServiceOfferDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteServiceOffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaginatedNetworkServiceOffers",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaginatedServiceOffers",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getServiceOfferById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateServiceOffer",
    values: [BigNumberish, UpdateServiceOfferDataStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "createServiceOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteServiceOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaginatedNetworkServiceOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaginatedServiceOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getServiceOfferById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateServiceOffer",
    data: BytesLike
  ): Result;

  events: {
    "ServiceOfferCreated(address,uint32)": EventFragment;
    "ServiceOfferDeleted(address,uint32)": EventFragment;
    "ServiceOfferUpdated(address,uint32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ServiceOfferCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ServiceOfferDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ServiceOfferUpdated"): EventFragment;
}

export type ServiceOfferCreatedEvent = TypedEvent<
  [string, number],
  { networkId: string; serviceOfferId: number }
>;

export type ServiceOfferCreatedEventFilter =
  TypedEventFilter<ServiceOfferCreatedEvent>;

export type ServiceOfferDeletedEvent = TypedEvent<
  [string, number],
  { networkId: string; serviceOfferId: number }
>;

export type ServiceOfferDeletedEventFilter =
  TypedEventFilter<ServiceOfferDeletedEvent>;

export type ServiceOfferUpdatedEvent = TypedEvent<
  [string, number],
  { networkId: string; serviceOfferId: number }
>;

export type ServiceOfferUpdatedEventFilter =
  TypedEventFilter<ServiceOfferUpdatedEvent>;

export interface ServiceOfferFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ServiceOfferFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createServiceOffer(
      serviceOfferData: ServiceOfferDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deleteServiceOffer(
      serviceOfferId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPaginatedNetworkServiceOffers(
      networkId: BytesLike,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[ServiceOfferResponseStructOutput[], number]>;

    getPaginatedServiceOffers(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[ServiceOfferResponseStructOutput[], number]>;

    getServiceOfferById(
      serviceOfferId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[ServiceOfferResponseStructOutput]>;

    updateServiceOffer(
      serviceOfferId: BigNumberish,
      updateData: UpdateServiceOfferDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createServiceOffer(
    serviceOfferData: ServiceOfferDataStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deleteServiceOffer(
    serviceOfferId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPaginatedNetworkServiceOffers(
    networkId: BytesLike,
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[ServiceOfferResponseStructOutput[], number]>;

  getPaginatedServiceOffers(
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[ServiceOfferResponseStructOutput[], number]>;

  getServiceOfferById(
    serviceOfferId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ServiceOfferResponseStructOutput>;

  updateServiceOffer(
    serviceOfferId: BigNumberish,
    updateData: UpdateServiceOfferDataStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createServiceOffer(
      serviceOfferData: ServiceOfferDataStruct,
      overrides?: CallOverrides
    ): Promise<number>;

    deleteServiceOffer(
      serviceOfferId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getPaginatedNetworkServiceOffers(
      networkId: BytesLike,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[ServiceOfferResponseStructOutput[], number]>;

    getPaginatedServiceOffers(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[ServiceOfferResponseStructOutput[], number]>;

    getServiceOfferById(
      serviceOfferId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ServiceOfferResponseStructOutput>;

    updateServiceOffer(
      serviceOfferId: BigNumberish,
      updateData: UpdateServiceOfferDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ServiceOfferCreated(address,uint32)"(
      networkId?: string | null,
      serviceOfferId?: BigNumberish | null
    ): ServiceOfferCreatedEventFilter;
    ServiceOfferCreated(
      networkId?: string | null,
      serviceOfferId?: BigNumberish | null
    ): ServiceOfferCreatedEventFilter;

    "ServiceOfferDeleted(address,uint32)"(
      networkId?: string | null,
      serviceOfferId?: BigNumberish | null
    ): ServiceOfferDeletedEventFilter;
    ServiceOfferDeleted(
      networkId?: string | null,
      serviceOfferId?: BigNumberish | null
    ): ServiceOfferDeletedEventFilter;

    "ServiceOfferUpdated(address,uint32)"(
      networkId?: string | null,
      serviceOfferId?: BigNumberish | null
    ): ServiceOfferUpdatedEventFilter;
    ServiceOfferUpdated(
      networkId?: string | null,
      serviceOfferId?: BigNumberish | null
    ): ServiceOfferUpdatedEventFilter;
  };

  estimateGas: {
    createServiceOffer(
      serviceOfferData: ServiceOfferDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deleteServiceOffer(
      serviceOfferId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPaginatedNetworkServiceOffers(
      networkId: BytesLike,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaginatedServiceOffers(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getServiceOfferById(
      serviceOfferId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateServiceOffer(
      serviceOfferId: BigNumberish,
      updateData: UpdateServiceOfferDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createServiceOffer(
      serviceOfferData: ServiceOfferDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deleteServiceOffer(
      serviceOfferId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPaginatedNetworkServiceOffers(
      networkId: BytesLike,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPaginatedServiceOffers(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getServiceOfferById(
      serviceOfferId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateServiceOffer(
      serviceOfferId: BigNumberish,
      updateData: UpdateServiceOfferDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
