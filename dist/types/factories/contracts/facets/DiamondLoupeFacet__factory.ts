/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  DiamondLoupeFacet,
  DiamondLoupeFacetInterface,
} from "../../../contracts/facets/DiamondLoupeFacet";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_functionSelector",
        type: "bytes4",
      },
    ],
    name: "facetAddress",
    outputs: [
      {
        internalType: "address",
        name: "facetAddress_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "facetAddresses",
    outputs: [
      {
        internalType: "address[]",
        name: "facetAddresses_",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_facet",
        type: "address",
      },
    ],
    name: "facetFunctionSelectors",
    outputs: [
      {
        internalType: "bytes4[]",
        name: "_facetFunctionSelectors",
        type: "bytes4[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "facets",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
        ],
        internalType: "struct IDiamondLoupe.Facet[]",
        name: "facets_",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610b83806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806301ffc9a71461005c57806352ef6b2c146100bd5780637a0ed627146100d2578063adfca15e146100e7578063cdffacc614610107575b600080fd5b6100a861006a366004610915565b6001600160e01b03191660009081527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131f602052604090205460ff1690565b60405190151581526020015b60405180910390f35b6100c5610159565b6040516100b49190610946565b6100da610333565b6040516100b491906109d8565b6100fa6100f5366004610a55565b610792565b6040516100b49190610a7e565b610141610115366004610915565b6001600160e01b0319166000908152600080516020610b2e833981519152602052604090205460601c90565b6040516001600160a01b0390911681526020016100b4565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e54606090600080516020610b2e8339815191529061ffff1667ffffffffffffffff8111156101aa576101aa610a91565b6040519080825280602002602001820160405280156101d3578160200160208202803683370190505b50915060008060005b600284015461ffff1682101561032b576000818152600185016020526040812054905b6008811015610316578361021281610abd565b600288015490955061ffff16851115905061022c57610316565b6000610239826020610ad8565b83901b6001600160e01b0319811660009081526020899052604081205491925060609190911c90805b888110156102b8578a818151811061027c5761027c610af7565b60200260200101516001600160a01b0316836001600160a01b031614156102a657600191506102b8565b806102b081610abd565b915050610262565b5080156102c85750610304915050565b818a89815181106102db576102db610af7565b6001600160a01b0390921660209283029190910190910152876102fd81610abd565b9850505050505b8061030e81610abd565b9150506101ff565b5050808061032390610abd565b9150506101dc565b505082525090565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e54606090600080516020610b2e8339815191529061ffff1667ffffffffffffffff81111561038457610384610a91565b6040519080825280602002602001820160405280156103ca57816020015b6040805180820190915260008152606060208201528152602001906001900390816103a25790505b50600282015490925060009061ffff1667ffffffffffffffff8111156103f2576103f2610a91565b60405190808252806020026020018201604052801561041b578160200160208202803683370190505b50905060008060005b600285015461ffff16821015610720576000818152600186016020526040812054905b600881101561070b578361045a81610abd565b600289015490955061ffff1685111590506104745761070b565b6000610481826020610ad8565b83901b6001600160e01b03198116600090815260208a9052604081205491925060609190911c90805b888110156105c857826001600160a01b03168c82815181106104ce576104ce610af7565b6020026020010151600001516001600160a01b031614156105b657838c82815181106104fc576104fc610af7565b6020026020010151602001518b838151811061051a5761051a610af7565b602002602001015160ff168151811061053557610535610af7565b60200260200101906001600160e01b03191690816001600160e01b0319168152505060ff8a828151811061056b5761056b610af7565b602002602001015160ff161061058057600080fd5b89818151811061059257610592610af7565b6020026020010180518091906105a790610b0d565b60ff16905250600191506105c8565b806105c081610abd565b9150506104aa565b5080156105d857506106f9915050565b818b89815181106105eb576105eb610af7565b60209081029190910101516001600160a01b03909116905260028a015461ffff1667ffffffffffffffff81111561062457610624610a91565b60405190808252806020026020018201604052801561064d578160200160208202803683370190505b508b898151811061066057610660610af7565b602002602001015160200181905250828b898151811061068257610682610af7565b6020026020010151602001516000815181106106a0576106a0610af7565b60200260200101906001600160e01b03191690816001600160e01b0319168152505060018989815181106106d6576106d6610af7565b60ff90921660209283029190910190910152876106f281610abd565b9850505050505b8061070381610abd565b915050610447565b5050808061071890610abd565b915050610424565b5060005b8281101561078757600084828151811061074057610740610af7565b602002602001015160ff169050600087838151811061076157610761610af7565b60200260200101516020015190508181525050808061077f90610abd565b915050610724565b508185525050505090565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e54606090600080516020610b2e8339815191529060009061ffff1667ffffffffffffffff8111156107e6576107e6610a91565b60405190808252806020026020018201604052801561080f578160200160208202803683370190505b5092506000805b600284015461ffff1682101561090b576000818152600185016020526040812054905b60088110156108f6578361084c81610abd565b600288015490955061ffff168511159050610866576108f6565b6000610873826020610ad8565b83901b6001600160e01b0319811660009081526020899052604090205490915060601c6001600160a01b038a168114156108e157818988815181106108ba576108ba610af7565b6001600160e01b031990921660209283029190910190910152866108dd81610abd565b9750505b505080806108ee90610abd565b915050610839565b5050808061090390610abd565b915050610816565b5050825250919050565b60006020828403121561092757600080fd5b81356001600160e01b03198116811461093f57600080fd5b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156109875783516001600160a01b031683529284019291840191600101610962565b50909695505050505050565b600081518084526020808501945080840160005b838110156109cd5781516001600160e01b031916875295820195908201906001016109a7565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015610a4757888303603f19018552815180516001600160a01b03168452870151878401879052610a3487850182610993565b95880195935050908601906001016109ff565b509098975050505050505050565b600060208284031215610a6757600080fd5b81356001600160a01b038116811461093f57600080fd5b60208152600061093f6020830184610993565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415610ad157610ad1610aa7565b5060010190565b6000816000190483118215151615610af257610af2610aa7565b500290565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff811415610b2457610b24610aa7565b6001019291505056fec8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131ca26469706673582212203155e5c6f41750ba9fd7686076e3fedd0bf0d8e77b457d6e12581139f2d5f7e364736f6c63430008090033";

type DiamondLoupeFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DiamondLoupeFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DiamondLoupeFacet__factory extends ContractFactory {
  constructor(...args: DiamondLoupeFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DiamondLoupeFacet> {
    return super.deploy(overrides || {}) as Promise<DiamondLoupeFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DiamondLoupeFacet {
    return super.attach(address) as DiamondLoupeFacet;
  }
  override connect(signer: Signer): DiamondLoupeFacet__factory {
    return super.connect(signer) as DiamondLoupeFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DiamondLoupeFacetInterface {
    return new utils.Interface(_abi) as DiamondLoupeFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DiamondLoupeFacet {
    return new Contract(address, _abi, signerOrProvider) as DiamondLoupeFacet;
  }
}
