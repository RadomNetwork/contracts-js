/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IServiceErrors,
  IServiceErrorsInterface,
} from "../../../contracts/interfaces/IServiceErrors";

const _abi = [
  {
    inputs: [],
    name: "AddressAlreadyWhitelisted",
    type: "error",
  },
  {
    inputs: [],
    name: "AddressNotWhitelisted",
    type: "error",
  },
  {
    inputs: [],
    name: "AgreementCancelled",
    type: "error",
  },
  {
    inputs: [],
    name: "AgreementNotFound",
    type: "error",
  },
  {
    inputs: [],
    name: "AgreementVoid",
    type: "error",
  },
  {
    inputs: [],
    name: "AmountIsTooSmall",
    type: "error",
  },
  {
    inputs: [],
    name: "AssetTypeNotSupported",
    type: "error",
  },
  {
    inputs: [],
    name: "ChargeIntervalInvalid",
    type: "error",
  },
  {
    inputs: [],
    name: "FeatureNotSupported",
    type: "error",
  },
  {
    inputs: [],
    name: "IncorrectAgreementPurchaser",
    type: "error",
  },
  {
    inputs: [],
    name: "IncorrectPaymentModel",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientFunds",
    type: "error",
  },
  {
    inputs: [],
    name: "KVPKeyNotFound",
    type: "error",
  },
  {
    inputs: [],
    name: "KVPRequiredKeyNotFound",
    type: "error",
  },
  {
    inputs: [],
    name: "MissingRequiredKeys",
    type: "error",
  },
  {
    inputs: [],
    name: "OfferAlreadyExists",
    type: "error",
  },
  {
    inputs: [],
    name: "OfferDisabled",
    type: "error",
  },
  {
    inputs: [],
    name: "OfferHasActiveAgreement",
    type: "error",
  },
  {
    inputs: [],
    name: "OfferNotFound",
    type: "error",
  },
  {
    inputs: [],
    name: "OrgMustDeposit",
    type: "error",
  },
  {
    inputs: [],
    name: "OrgStreamDoesNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "PricingInputInvalid",
    type: "error",
  },
  {
    inputs: [],
    name: "PricingOptionDisabled",
    type: "error",
  },
  {
    inputs: [],
    name: "PricingSelectionInvalid",
    type: "error",
  },
  {
    inputs: [],
    name: "ProductHasNoPricing",
    type: "error",
  },
  {
    inputs: [],
    name: "UnsupportedToken",
    type: "error",
  },
  {
    inputs: [],
    name: "WhitelistLimitExceeded",
    type: "error",
  },
] as const;

export class IServiceErrors__factory {
  static readonly abi = _abi;
  static createInterface(): IServiceErrorsInterface {
    return new utils.Interface(_abi) as IServiceErrorsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IServiceErrors {
    return new Contract(address, _abi, signerOrProvider) as IServiceErrors;
  }
}
