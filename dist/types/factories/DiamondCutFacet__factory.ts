/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  DiamondCutFacet,
  DiamondCutFacetInterface,
} from "../DiamondCutFacet";

const _abi = [
  {
    inputs: [],
    name: "AddressCannotBeZero",
    type: "error",
  },
  {
    inputs: [],
    name: "AddressHasNoCode",
    type: "error",
  },
  {
    inputs: [],
    name: "AddressMustBeZero",
    type: "error",
  },
  {
    inputs: [],
    name: "CallDataEmptyInitAddressNotZero",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "FunctionDoesNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "ImmutableFunction",
    type: "error",
  },
  {
    inputs: [],
    name: "IncorrectFacetCutAction",
    type: "error",
  },
  {
    inputs: [],
    name: "InitAddressZeroCallDataNotEmpty",
    type: "error",
  },
  {
    inputs: [],
    name: "LibDiamondCutInitFail",
    type: "error",
  },
  {
    inputs: [],
    name: "NoSelectorsToCut",
    type: "error",
  },
  {
    inputs: [],
    name: "RemoveAddressMustBeZero",
    type: "error",
  },
  {
    inputs: [],
    name: "ReplacingSameFunction",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "enum IDiamondCut.FacetCutAction",
            name: "action",
            type: "uint8",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
        ],
        indexed: false,
        internalType: "struct IDiamondCut.FacetCut[]",
        name: "_diamondCut",
        type: "tuple[]",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_init",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "_calldata",
        type: "bytes",
      },
    ],
    name: "DiamondCut",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "enum IDiamondCut.FacetCutAction",
            name: "action",
            type: "uint8",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
        ],
        internalType: "struct IDiamondCut.FacetCut[]",
        name: "_diamondCut",
        type: "tuple[]",
      },
      {
        internalType: "address",
        name: "_init",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_calldata",
        type: "bytes",
      },
    ],
    name: "diamondCut",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610f17806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80631f931c1c14610030575b600080fd5b61004361003e366004610a77565b610045565b005b61004d6102a1565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e547fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c9061ffff16806000806100a4600884610b3f565b11156100cd576001840160006100bb600885610b69565b81526020019081526020016000205490505b60005b888110156101c4576101ad83838c8c858181106100ef576100ef610b7d565b90506020028101906101019190610b93565b61010f906020810190610bb3565b8d8d8681811061012157610121610b7d565b90506020028101906101339190610b93565b610144906040810190602001610be4565b8e8e8781811061015657610156610b7d565b90506020028101906101689190610b93565b610176906040810190610bff565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506102f092505050565b9093509150806101bc81610c49565b9150506100d0565b508282146101e05760028401805461ffff191661ffff84161790555b60006101ed600884610b3f565b11156102175780600185016000610205600886610b69565b81526020810191909152604001600020555b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673898989898960405161024e959493929190610cf1565b60405180910390a16102968787878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506108cd92505050565b505050505050505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600401546001600160a01b031633146102ee57604051632e6c18c960e11b815260040160405180910390fd5b565b600080807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c905083516000036103395760405163e1fc0c9960e01b815260040160405180910390fd5b600085600281111561034d5761034d610c62565b036104b3576001600160a01b038616610379576040516303988b8160e61b815260040160405180910390fd5b610382866109ee565b60005b84518110156104ad5760008582815181106103a2576103a2610b7d565b6020908102919091018101516001600160e01b03198116600090815291859052604090912054909150606081901c156103ee57604051631535ac5f60e31b815260040160405180910390fd5b6001600160e01b0319821660009081526020859052604081206001600160601b031960608c901b168d17905561042560088d610b3f565b610430906020610e1e565b905080836001600160e01b031916901c816001600160e01b031960001b901c198c16179a508060e00361048a578a85600101600060088f6104719190610b69565b8152602001908152602001600020819055506000801b9a505b8b61049481610c49565b9c505050505080806104a590610c49565b915050610385565b506108c1565b60018560028111156104c7576104c7610c62565b03610613576001600160a01b0386166104f3576040516303988b8160e61b815260040160405180910390fd5b6104fc866109ee565b60005b84518110156104ad57600085828151811061051c5761051c610b7d565b6020908102919091018101516001600160e01b03198116600090815291859052604090912054909150606081901c30810361056a576040516337684dcd60e21b815260040160405180910390fd5b896001600160a01b0316816001600160a01b03160361059c5760405163a240b83560e01b815260040160405180910390fd5b6001600160a01b0381166105c357604051631535ac5f60e31b815260040160405180910390fd5b506001600160e01b031990911660009081526020849052604090206bffffffffffffffffffffffff919091166001600160601b031960608a901b161790558061060b81610c49565b9150506104ff565b600285600281111561062757610627610c62565b036108a8576001600160a01b0386161561065457604051631a342c8b60e31b815260040160405180910390fd5b600061066160088a610b69565b90506000600161067260088c610b3f565b61067c9190610e3b565b905060005b865181101561087d5760008a90036106b8578261069d81610e4e565b60008181526001870160205260409020549b50935060079250505b6000806000808a85815181106106d0576106d0610b7d565b6020908102919091018101516001600160e01b031981166000908152918a9052604090912054909150606081901c61071b57604051631535ac5f60e31b815260040160405180910390fd5b606081901c301461073f576040516337684dcd60e21b815260040160405180910390fd5b61074a876020610e1e565b8f901b94506001600160e01b03198086169083161461079b576001600160e01b03198516600090815260208a90526040902080546001600160601b0319166bffffffffffffffffffffffff83161790555b6001600160e01b03198216600090815260208a9052604081205561ffff81166107c5600882610b69565b94506107d2600882610b3f565b6107dd906020610e1e565b9350505050858214610818576000828152600188016020526040902080546001600160e01b031980841c19909116908516831c17905561083c565b80836001600160e01b031916901c816001600160e01b031960001b901c198e16179c505b8460000361085a57600086815260018801602052604081208190559c505b8461086481610e4e565b955050505050808061087590610c49565b915050610681565b508061088a836008610e1e565b6108949190610e65565b61089f906001610e65565b995050506108c1565b60405163e548e6b560e01b815260040160405180910390fd5b50959694955050505050565b6001600160a01b0382166108ff578051156108fb576040516384ca2d5b60e01b815260040160405180910390fd5b5050565b805160000361092157604051639a12f3b760e01b815260040160405180910390fd5b6001600160a01b038216301461093a5761093a826109ee565b600080836001600160a01b0316836040516109559190610e9c565b600060405180830381855af49150503d8060008114610990576040519150601f19603f3d011682016040523d82523d6000602084013e610995565b606091505b5090925090508115156000036109e8578051156109cf578060405162461bcd60e51b81526004016109c69190610eae565b60405180910390fd5b604051631abc044960e21b815260040160405180910390fd5b50505050565b803b60008190036108fb57604051632debf4d960e01b815260040160405180910390fd5b80356001600160a01b0381168114610a2957600080fd5b919050565b60008083601f840112610a4057600080fd5b50813567ffffffffffffffff811115610a5857600080fd5b602083019150836020828501011115610a7057600080fd5b9250929050565b600080600080600060608688031215610a8f57600080fd5b853567ffffffffffffffff80821115610aa757600080fd5b818801915088601f830112610abb57600080fd5b813581811115610aca57600080fd5b8960208260051b8501011115610adf57600080fd5b60208301975080965050610af560208901610a12565b94506040880135915080821115610b0b57600080fd5b50610b1888828901610a2e565b969995985093965092949392505050565b634e487b7160e01b600052601260045260246000fd5b600082610b4e57610b4e610b29565b500690565b634e487b7160e01b600052601160045260246000fd5b600082610b7857610b78610b29565b500490565b634e487b7160e01b600052603260045260246000fd5b60008235605e19833603018112610ba957600080fd5b9190910192915050565b600060208284031215610bc557600080fd5b610bce82610a12565b9392505050565b803560038110610a2957600080fd5b600060208284031215610bf657600080fd5b610bce82610bd5565b6000808335601e19843603018112610c1657600080fd5b83018035915067ffffffffffffffff821115610c3157600080fd5b6020019150600581901b3603821315610a7057600080fd5b600060018201610c5b57610c5b610b53565b5060010190565b634e487b7160e01b600052602160045260246000fd5b818352600060208085019450826000805b86811015610cbc5782356001600160e01b03198116808214610ca9578384fd5b8952509683019691830191600101610c89565b50959695505050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6060808252818101869052600090600560808085019089831b8601018a855b8b811015610deb57878303607f190184528135368e9003605e19018112610d3657600080fd5b8d016001600160a01b03610d4982610a12565b1684526020610d59818301610bd5565b60038110610d7757634e487b7160e01b600052602160045260246000fd5b8582015260408281013536849003601e19018112610d9457600080fd5b90920181810192903567ffffffffffffffff811115610db257600080fd5b80891b3603841315610dc357600080fd5b8982880152610dd58a88018286610c78565b9783019796505050929092019150600101610d10565b50506001600160a01b03891660208701528581036040870152610e0f81888a610cc8565b9b9a5050505050505050505050565b8082028115828204841417610e3557610e35610b53565b92915050565b81810381811115610e3557610e35610b53565b600081610e5d57610e5d610b53565b506000190190565b80820180821115610e3557610e35610b53565b60005b83811015610e93578181015183820152602001610e7b565b50506000910152565b60008251610ba9818460208701610e78565b6020815260008251806020840152610ecd816040850160208701610e78565b601f01601f1916919091016040019291505056fea2646970667358221220c4764d9f1a89e53ca91367fa333164b68a4f67cab1766369a1d893dc8ffcdc6d64736f6c63430008110033";

type DiamondCutFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DiamondCutFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DiamondCutFacet__factory extends ContractFactory {
  constructor(...args: DiamondCutFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DiamondCutFacet> {
    return super.deploy(overrides || {}) as Promise<DiamondCutFacet>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): DiamondCutFacet {
    return super.attach(address) as DiamondCutFacet;
  }
  connect(signer: Signer): DiamondCutFacet__factory {
    return super.connect(signer) as DiamondCutFacet__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DiamondCutFacetInterface {
    return new utils.Interface(_abi) as DiamondCutFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DiamondCutFacet {
    return new Contract(address, _abi, signerOrProvider) as DiamondCutFacet;
  }
}
