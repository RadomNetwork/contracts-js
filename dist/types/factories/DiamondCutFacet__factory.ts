/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  DiamondCutFacet,
  DiamondCutFacetInterface,
} from "../DiamondCutFacet";

const _abi = [
  {
    inputs: [],
    name: "AddressCannotBeZero",
    type: "error",
  },
  {
    inputs: [],
    name: "AddressHasNoCode",
    type: "error",
  },
  {
    inputs: [],
    name: "AddressMustBeZero",
    type: "error",
  },
  {
    inputs: [],
    name: "CallDataEmptyInitAddressNotZero",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "FunctionDoesNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "ImmutableFunction",
    type: "error",
  },
  {
    inputs: [],
    name: "IncorrectFacetCutAction",
    type: "error",
  },
  {
    inputs: [],
    name: "InitAddressZeroCallDataNotEmpty",
    type: "error",
  },
  {
    inputs: [],
    name: "LibDiamondCutInitFail",
    type: "error",
  },
  {
    inputs: [],
    name: "NoSelectorsToCut",
    type: "error",
  },
  {
    inputs: [],
    name: "RemoveAddressMustBeZero",
    type: "error",
  },
  {
    inputs: [],
    name: "ReplacingSameFunction",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "enum IDiamondCut.FacetCutAction",
            name: "action",
            type: "uint8",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
        ],
        indexed: false,
        internalType: "struct IDiamondCut.FacetCut[]",
        name: "_diamondCut",
        type: "tuple[]",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_init",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "_calldata",
        type: "bytes",
      },
    ],
    name: "DiamondCut",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "enum IDiamondCut.FacetCutAction",
            name: "action",
            type: "uint8",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
        ],
        internalType: "struct IDiamondCut.FacetCut[]",
        name: "_diamondCut",
        type: "tuple[]",
      },
      {
        internalType: "address",
        name: "_init",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_calldata",
        type: "bytes",
      },
    ],
    name: "diamondCut",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610f18806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80631f931c1c14610030575b600080fd5b61004361003e366004610a67565b610045565b005b61004d6102a1565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e547fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c9061ffff16806000806100a4600884610b2f565b11156100cd576001840160006100bb600885610b59565b81526020019081526020016000205490505b60005b888110156101c4576101ad83838c8c858181106100ef576100ef610b6d565b90506020028101906101019190610b83565b61010f906020810190610ba3565b8d8d8681811061012157610121610b6d565b90506020028101906101339190610b83565b610144906040810190602001610bd4565b8e8e8781811061015657610156610b6d565b90506020028101906101689190610b83565b610176906040810190610bef565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506102f092505050565b9093509150806101bc81610c39565b9150506100d0565b508282146101e05760028401805461ffff191661ffff84161790555b60006101ed600884610b2f565b11156102175780600185016000610205600886610b59565b81526020810191909152604001600020555b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673898989898960405161024e959493929190610ce3565b60405180910390a16102968787878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506108c992505050565b505050505050505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600401546001600160a01b031633146102ee57604051632e6c18c960e11b815260040160405180910390fd5b565b805160009081907fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c906103365760405163e1fc0c9960e01b815260040160405180910390fd5b600085600281111561034a5761034a610c54565b14156104b2576001600160a01b038616610377576040516303988b8160e61b815260040160405180910390fd5b610380866109e2565b60005b84518110156104ac5760008582815181106103a0576103a0610b6d565b6020908102919091018101516001600160e01b03198116600090815291859052604090912054909150606081901c156103ec57604051631535ac5f60e31b815260040160405180910390fd5b6001600160e01b0319821660009081526020859052604081206001600160601b031960608c901b168d17905561042360088d610b2f565b61042e906020610e0c565b905080836001600160e01b031916901c816001600160e01b031960001b901c198c16179a508060e01415610489578a85600101600060088f6104709190610b59565b8152602001908152602001600020819055506000801b9a505b8b61049381610c39565b9c505050505080806104a490610c39565b915050610383565b506108bd565b60018560028111156104c6576104c6610c54565b1415610615576001600160a01b0386166104f3576040516303988b8160e61b815260040160405180910390fd5b6104fc866109e2565b60005b84518110156104ac57600085828151811061051c5761051c610b6d565b6020908102919091018101516001600160e01b03198116600090815291859052604090912054909150606081901c3081141561056b576040516337684dcd60e21b815260040160405180910390fd5b896001600160a01b0316816001600160a01b0316141561059e5760405163a240b83560e01b815260040160405180910390fd5b6001600160a01b0381166105c557604051631535ac5f60e31b815260040160405180910390fd5b506001600160e01b031990911660009081526020849052604090206bffffffffffffffffffffffff919091166001600160601b031960608a901b161790558061060d81610c39565b9150506104ff565b600285600281111561062957610629610c54565b14156108a4576001600160a01b0386161561065757604051631a342c8b60e31b815260040160405180910390fd5b600061066460088a610b59565b90506000600161067560088c610b2f565b61067f9190610e2b565b905060005b865181101561087957896106b7578261069c81610e42565b60008181526001870160205260409020549b50935060079250505b6000806000808a85815181106106cf576106cf610b6d565b6020908102919091018101516001600160e01b031981166000908152918a9052604090912054909150606081901c61071a57604051631535ac5f60e31b815260040160405180910390fd5b606081901c301461073e576040516337684dcd60e21b815260040160405180910390fd5b610749876020610e0c565b8f901b94506001600160e01b03198086169083161461079a576001600160e01b03198516600090815260208a90526040902080546001600160601b0319166bffffffffffffffffffffffff83161790555b6001600160e01b03198216600090815260208a9052604081205561ffff81166107c4600882610b59565b94506107d1600882610b2f565b6107dc906020610e0c565b9350505050858214610817576000828152600188016020526040902080546001600160e01b031980841c19909116908516831c17905561083b565b80836001600160e01b031916901c816001600160e01b031960001b901c198e16179c505b8461085657600086815260018801602052604081208190559c505b8461086081610e42565b955050505050808061087190610c39565b915050610684565b5080610886836008610e0c565b6108909190610e59565b61089b906001610e59565b995050506108bd565b60405163e548e6b560e01b815260040160405180910390fd5b50959694955050505050565b6001600160a01b0382166108fb578051156108f7576040516384ca2d5b60e01b815260040160405180910390fd5b5050565b805161091a57604051639a12f3b760e01b815260040160405180910390fd5b6001600160a01b038216301461093357610933826109e2565b600080836001600160a01b03168360405161094e9190610e9d565b600060405180830381855af49150503d8060008114610989576040519150601f19603f3d011682016040523d82523d6000602084013e61098e565b606091505b509092509050816109dc578051156109c3578060405162461bcd60e51b81526004016109ba9190610eaf565b60405180910390fd5b604051631abc044960e21b815260040160405180910390fd5b50505050565b803b806108f757604051632debf4d960e01b815260040160405180910390fd5b80356001600160a01b0381168114610a1957600080fd5b919050565b60008083601f840112610a3057600080fd5b50813567ffffffffffffffff811115610a4857600080fd5b602083019150836020828501011115610a6057600080fd5b9250929050565b600080600080600060608688031215610a7f57600080fd5b853567ffffffffffffffff80821115610a9757600080fd5b818801915088601f830112610aab57600080fd5b813581811115610aba57600080fd5b8960208260051b8501011115610acf57600080fd5b60208301975080965050610ae560208901610a02565b94506040880135915080821115610afb57600080fd5b50610b0888828901610a1e565b969995985093965092949392505050565b634e487b7160e01b600052601260045260246000fd5b600082610b3e57610b3e610b19565b500690565b634e487b7160e01b600052601160045260246000fd5b600082610b6857610b68610b19565b500490565b634e487b7160e01b600052603260045260246000fd5b60008235605e19833603018112610b9957600080fd5b9190910192915050565b600060208284031215610bb557600080fd5b610bbe82610a02565b9392505050565b803560038110610a1957600080fd5b600060208284031215610be657600080fd5b610bbe82610bc5565b6000808335601e19843603018112610c0657600080fd5b83018035915067ffffffffffffffff821115610c2157600080fd5b6020019150600581901b3603821315610a6057600080fd5b6000600019821415610c4d57610c4d610b43565b5060010190565b634e487b7160e01b600052602160045260246000fd5b818352600060208085019450826000805b86811015610cae5782356001600160e01b03198116808214610c9b578384fd5b8952509683019691830191600101610c7b565b50959695505050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6060808252818101869052600090600560808085019089831b8601018a855b8b811015610dd957878303607f190184528135368e9003605e19018112610d2857600080fd5b8d016001600160a01b03610d3b82610a02565b1684526020610d4b818301610bc5565b60038110610d6957634e487b7160e01b600052602160045260246000fd5b8582015260408281013536849003601e19018112610d8657600080fd5b8301803567ffffffffffffffff811115610d9f57600080fd5b808a1b3603851315610db057600080fd5b8a83890152610dc48b890182868501610c6a565b98840198975050509301925050600101610d02565b50506001600160a01b03891660208701528581036040870152610dfd81888a610cba565b9b9a5050505050505050505050565b6000816000190483118215151615610e2657610e26610b43565b500290565b600082821015610e3d57610e3d610b43565b500390565b600081610e5157610e51610b43565b506000190190565b60008219821115610e6c57610e6c610b43565b500190565b60005b83811015610e8c578181015183820152602001610e74565b838111156109dc5750506000910152565b60008251610b99818460208701610e71565b6020815260008251806020840152610ece816040850160208701610e71565b601f01601f1916919091016040019291505056fea2646970667358221220c5c9bcf53a0f3c4aa5a325da1c690b9f96e88d37dce03197cdcde020f42c107d64736f6c63430008090033";

type DiamondCutFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DiamondCutFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DiamondCutFacet__factory extends ContractFactory {
  constructor(...args: DiamondCutFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DiamondCutFacet> {
    return super.deploy(overrides || {}) as Promise<DiamondCutFacet>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): DiamondCutFacet {
    return super.attach(address) as DiamondCutFacet;
  }
  connect(signer: Signer): DiamondCutFacet__factory {
    return super.connect(signer) as DiamondCutFacet__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DiamondCutFacetInterface {
    return new utils.Interface(_abi) as DiamondCutFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DiamondCutFacet {
    return new Contract(address, _abi, signerOrProvider) as DiamondCutFacet;
  }
}
