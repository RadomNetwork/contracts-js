/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace Services {
  export type PricingOptionStruct = {
    key: PromiseOrValue<BytesLike>;
    disabled: PromiseOrValue<boolean>;
    price: PromiseOrValue<BigNumberish>;
  };

  export type PricingOptionStructOutput = [string, boolean, BigNumber] & {
    key: string;
    disabled: boolean;
    price: BigNumber;
  };

  export type PricingInputStruct = {
    key: PromiseOrValue<BytesLike>;
    canBeUpdated: PromiseOrValue<boolean>;
    options: Services.PricingOptionStruct[];
  };

  export type PricingInputStructOutput = [
    string,
    boolean,
    Services.PricingOptionStructOutput[]
  ] & {
    key: string;
    canBeUpdated: boolean;
    options: Services.PricingOptionStructOutput[];
  };

  export type ServiceOfferDataStruct = {
    configInputs: PromiseOrValue<BytesLike>[];
    whitelist: PromiseOrValue<string>[];
    tokenExchangeRates: PromiseOrValue<BigNumberish>[];
    tokens: PromiseOrValue<string>[];
    pricing: PromiseOrValue<BigNumberish>;
    title2: PromiseOrValue<BytesLike>;
    title1: PromiseOrValue<BytesLike>;
    publicKey: PromiseOrValue<BytesLike>;
    description: PromiseOrValue<BytesLike>;
    chargeInterval: PromiseOrValue<BigNumberish>;
    offerEnabled: PromiseOrValue<boolean>;
    whitelistEnabled: PromiseOrValue<boolean>;
    authenticationType: PromiseOrValue<BigNumberish>;
    paymentModel: PromiseOrValue<BigNumberish>;
    pricingInputs: Services.PricingInputStruct[];
  };

  export type ServiceOfferDataStructOutput = [
    string[],
    string[],
    BigNumber[],
    string[],
    BigNumber,
    string,
    string,
    string,
    string,
    number,
    boolean,
    boolean,
    number,
    number,
    Services.PricingInputStructOutput[]
  ] & {
    configInputs: string[];
    whitelist: string[];
    tokenExchangeRates: BigNumber[];
    tokens: string[];
    pricing: BigNumber;
    title2: string;
    title1: string;
    publicKey: string;
    description: string;
    chargeInterval: number;
    offerEnabled: boolean;
    whitelistEnabled: boolean;
    authenticationType: number;
    paymentModel: number;
    pricingInputs: Services.PricingInputStructOutput[];
  };

  export type KeyValuePairStruct = {
    key: PromiseOrValue<BytesLike>;
    value: PromiseOrValue<BytesLike>;
  };

  export type KeyValuePairStructOutput = [string, string] & {
    key: string;
    value: string;
  };

  export type PricingSelectionStruct = {
    key: PromiseOrValue<BytesLike>;
    option: PromiseOrValue<BytesLike>;
  };

  export type PricingSelectionStructOutput = [string, string] & {
    key: string;
    option: string;
  };

  export type ServiceAgreementResponseStruct = {
    sellerOrgId: PromiseOrValue<BytesLike>;
    serviceAgreementId: PromiseOrValue<BigNumberish>;
    agreementStart: PromiseOrValue<BigNumberish>;
    authenticationString: PromiseOrValue<BytesLike>;
    agreementEnd: PromiseOrValue<BigNumberish>;
    indexRunsOutOfFunds: PromiseOrValue<BigNumberish>;
    pricing: PromiseOrValue<BigNumberish>;
    offerPurchaser: PromiseOrValue<BytesLike>;
    chargeInterval: PromiseOrValue<BigNumberish>;
    serviceOfferId: PromiseOrValue<BigNumberish>;
    isActive: PromiseOrValue<boolean>;
    cancelled: PromiseOrValue<boolean>;
    revoked: PromiseOrValue<boolean>;
    token: PromiseOrValue<string>;
    keyValuePairs: Services.KeyValuePairStruct[];
    pricingSelection: Services.PricingSelectionStruct[];
    paymentModel: PromiseOrValue<BigNumberish>;
  };

  export type ServiceAgreementResponseStructOutput = [
    string,
    BigNumber,
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    number,
    number,
    boolean,
    boolean,
    boolean,
    string,
    Services.KeyValuePairStructOutput[],
    Services.PricingSelectionStructOutput[],
    number
  ] & {
    sellerOrgId: string;
    serviceAgreementId: BigNumber;
    agreementStart: number;
    authenticationString: string;
    agreementEnd: BigNumber;
    indexRunsOutOfFunds: BigNumber;
    pricing: BigNumber;
    offerPurchaser: string;
    chargeInterval: number;
    serviceOfferId: number;
    isActive: boolean;
    cancelled: boolean;
    revoked: boolean;
    token: string;
    keyValuePairs: Services.KeyValuePairStructOutput[];
    pricingSelection: Services.PricingSelectionStructOutput[];
    paymentModel: number;
  };

  export type ServiceOfferResponseStruct = {
    configInputs: PromiseOrValue<BytesLike>[];
    whitelist: PromiseOrValue<string>[];
    tokenExchangeRates: PromiseOrValue<BigNumberish>[];
    tokens: PromiseOrValue<string>[];
    title2: PromiseOrValue<BytesLike>;
    title1: PromiseOrValue<BytesLike>;
    publicKey: PromiseOrValue<BytesLike>;
    description: PromiseOrValue<BytesLike>;
    pricing: PromiseOrValue<BigNumberish>;
    networkId: PromiseOrValue<BytesLike>;
    serviceOfferId: PromiseOrValue<BigNumberish>;
    chargeInterval: PromiseOrValue<BigNumberish>;
    offerEnabled: PromiseOrValue<boolean>;
    whitelistEnabled: PromiseOrValue<boolean>;
    authenticationType: PromiseOrValue<BigNumberish>;
    paymentModel: PromiseOrValue<BigNumberish>;
    pricingInputs: Services.PricingInputStruct[];
  };

  export type ServiceOfferResponseStructOutput = [
    string[],
    string[],
    BigNumber[],
    string[],
    string,
    string,
    string,
    string,
    BigNumber,
    string,
    number,
    number,
    boolean,
    boolean,
    number,
    number,
    Services.PricingInputStructOutput[]
  ] & {
    configInputs: string[];
    whitelist: string[];
    tokenExchangeRates: BigNumber[];
    tokens: string[];
    title2: string;
    title1: string;
    publicKey: string;
    description: string;
    pricing: BigNumber;
    networkId: string;
    serviceOfferId: number;
    chargeInterval: number;
    offerEnabled: boolean;
    whitelistEnabled: boolean;
    authenticationType: number;
    paymentModel: number;
    pricingInputs: Services.PricingInputStructOutput[];
  };

  export type PricingSelectionDataStruct = {
    key: PromiseOrValue<BytesLike>;
    optionIndex: PromiseOrValue<BigNumberish>;
  };

  export type PricingSelectionDataStructOutput = [string, number] & {
    key: string;
    optionIndex: number;
  };

  export type PurchaseAgreementDataStruct = {
    authenticationString: PromiseOrValue<BytesLike>;
    offerPurchaser: PromiseOrValue<BytesLike>;
    serviceOfferId: PromiseOrValue<BigNumberish>;
    tokenIndex: PromiseOrValue<BigNumberish>;
    configSelection: Services.KeyValuePairStruct[];
    pricingSelection: Services.PricingSelectionDataStruct[];
  };

  export type PurchaseAgreementDataStructOutput = [
    string,
    string,
    number,
    number,
    Services.KeyValuePairStructOutput[],
    Services.PricingSelectionDataStructOutput[]
  ] & {
    authenticationString: string;
    offerPurchaser: string;
    serviceOfferId: number;
    tokenIndex: number;
    configSelection: Services.KeyValuePairStructOutput[];
    pricingSelection: Services.PricingSelectionDataStructOutput[];
  };

  export type UpdateAgreementConfigDataStruct = {
    authenticationString: PromiseOrValue<BytesLike>;
    buyerOrgId: PromiseOrValue<BytesLike>;
    agreementId: PromiseOrValue<BigNumberish>;
    configSelection: Services.KeyValuePairStruct[];
  };

  export type UpdateAgreementConfigDataStructOutput = [
    string,
    string,
    BigNumber,
    Services.KeyValuePairStructOutput[]
  ] & {
    authenticationString: string;
    buyerOrgId: string;
    agreementId: BigNumber;
    configSelection: Services.KeyValuePairStructOutput[];
  };

  export type UpdateAgreementPricingSelectionDataStruct = {
    buyerOrgId: PromiseOrValue<BytesLike>;
    agreementId: PromiseOrValue<BigNumberish>;
    pricingSelection: Services.PricingSelectionDataStruct[];
  };

  export type UpdateAgreementPricingSelectionDataStructOutput = [
    string,
    BigNumber,
    Services.PricingSelectionDataStructOutput[]
  ] & {
    buyerOrgId: string;
    agreementId: BigNumber;
    pricingSelection: Services.PricingSelectionDataStructOutput[];
  };

  export type UpdateServiceOfferDataStruct = {
    dataToUpdate: Services.ServiceOfferDataStruct;
    whitelistToRemove: PromiseOrValue<string>[];
    configInputsToRemove: PromiseOrValue<BytesLike>[];
    pricingInputsToRemove: PromiseOrValue<BytesLike>[];
  };

  export type UpdateServiceOfferDataStructOutput = [
    Services.ServiceOfferDataStructOutput,
    string[],
    string[],
    string[]
  ] & {
    dataToUpdate: Services.ServiceOfferDataStructOutput;
    whitelistToRemove: string[];
    configInputsToRemove: string[];
    pricingInputsToRemove: string[];
  };
}

export interface IServicesInterface extends utils.Interface {
  functions: {
    "cancelSubscription(uint64,bytes20)": FunctionFragment;
    "createServiceOffer((bytes32[],address[],uint256[],address[],uint256,bytes32,bytes32,bytes,bytes,uint32,bool,bool,uint8,uint8,(bytes31,bool,(bytes31,bool,uint256)[])[]))": FunctionFragment;
    "deleteServiceOffer(uint32)": FunctionFragment;
    "getNumberOfActiveAgreements(uint32)": FunctionFragment;
    "getOfferAgreements(uint32)": FunctionFragment;
    "getPaginatedNetworkServiceOffers(bytes20,uint32,uint32)": FunctionFragment;
    "getPaginatedServiceAgreements(bytes20,uint64,uint64)": FunctionFragment;
    "getPaginatedServiceOffers(uint32,uint32)": FunctionFragment;
    "getPurchasedAgreements(bytes20)": FunctionFragment;
    "getServiceAgreement(uint64)": FunctionFragment;
    "getServiceOfferById(uint32)": FunctionFragment;
    "getSoldAgreements(bytes20)": FunctionFragment;
    "pricingStep()": FunctionFragment;
    "purchase((bytes,bytes20,uint32,uint32,(bytes32,bytes)[],(bytes31,uint8)[]),bool)": FunctionFragment;
    "revokeSubscription(uint64,uint32)": FunctionFragment;
    "updateAgreementConfig((bytes,bytes20,uint64,(bytes32,bytes)[]))": FunctionFragment;
    "updateAgreementPricingSelection((bytes20,uint64,(bytes31,uint8)[]))": FunctionFragment;
    "updateServiceOffer(uint32,((bytes32[],address[],uint256[],address[],uint256,bytes32,bytes32,bytes,bytes,uint32,bool,bool,uint8,uint8,(bytes31,bool,(bytes31,bool,uint256)[])[]),address[],bytes32[],bytes31[]))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancelSubscription"
      | "createServiceOffer"
      | "deleteServiceOffer"
      | "getNumberOfActiveAgreements"
      | "getOfferAgreements"
      | "getPaginatedNetworkServiceOffers"
      | "getPaginatedServiceAgreements"
      | "getPaginatedServiceOffers"
      | "getPurchasedAgreements"
      | "getServiceAgreement"
      | "getServiceOfferById"
      | "getSoldAgreements"
      | "pricingStep"
      | "purchase"
      | "revokeSubscription"
      | "updateAgreementConfig"
      | "updateAgreementPricingSelection"
      | "updateServiceOffer"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelSubscription",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "createServiceOffer",
    values: [Services.ServiceOfferDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteServiceOffer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfActiveAgreements",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOfferAgreements",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaginatedNetworkServiceOffers",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaginatedServiceAgreements",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaginatedServiceOffers",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPurchasedAgreements",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getServiceAgreement",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getServiceOfferById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSoldAgreements",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "pricingStep",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "purchase",
    values: [Services.PurchaseAgreementDataStruct, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeSubscription",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAgreementConfig",
    values: [Services.UpdateAgreementConfigDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAgreementPricingSelection",
    values: [Services.UpdateAgreementPricingSelectionDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateServiceOffer",
    values: [
      PromiseOrValue<BigNumberish>,
      Services.UpdateServiceOfferDataStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createServiceOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteServiceOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfActiveAgreements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOfferAgreements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaginatedNetworkServiceOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaginatedServiceAgreements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaginatedServiceOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPurchasedAgreements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getServiceAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getServiceOfferById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSoldAgreements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pricingStep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "purchase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAgreementConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAgreementPricingSelection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateServiceOffer",
    data: BytesLike
  ): Result;

  events: {
    "OneTimePurchaseSuccessful(uint160,address,address,address)": EventFragment;
    "ServiceAgreementCancelled(uint64,uint32,address,address,address,uint256,bool)": EventFragment;
    "ServiceAgreementCreated(uint64,uint32,address,address,address)": EventFragment;
    "ServiceAgreementUpdated(uint64,uint32,address,address,address)": EventFragment;
    "ServiceOfferCreated(address,uint32)": EventFragment;
    "ServiceOfferDeleted(address,uint32)": EventFragment;
    "ServiceOfferUpdated(address,uint32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OneTimePurchaseSuccessful"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ServiceAgreementCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ServiceAgreementCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ServiceAgreementUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ServiceOfferCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ServiceOfferDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ServiceOfferUpdated"): EventFragment;
}

export interface OneTimePurchaseSuccessfulEventObject {
  serviceOfferId: BigNumber;
  purchaser: string;
  seller: string;
  token: string;
}
export type OneTimePurchaseSuccessfulEvent = TypedEvent<
  [BigNumber, string, string, string],
  OneTimePurchaseSuccessfulEventObject
>;

export type OneTimePurchaseSuccessfulEventFilter =
  TypedEventFilter<OneTimePurchaseSuccessfulEvent>;

export interface ServiceAgreementCancelledEventObject {
  serviceAgreementId: BigNumber;
  serviceOfferId: number;
  purchaser: string;
  seller: string;
  token: string;
  userExpiryTimestamp: BigNumber;
  revoked: boolean;
}
export type ServiceAgreementCancelledEvent = TypedEvent<
  [BigNumber, number, string, string, string, BigNumber, boolean],
  ServiceAgreementCancelledEventObject
>;

export type ServiceAgreementCancelledEventFilter =
  TypedEventFilter<ServiceAgreementCancelledEvent>;

export interface ServiceAgreementCreatedEventObject {
  serviceAgreementId: BigNumber;
  serviceOfferId: number;
  purchaser: string;
  seller: string;
  token: string;
}
export type ServiceAgreementCreatedEvent = TypedEvent<
  [BigNumber, number, string, string, string],
  ServiceAgreementCreatedEventObject
>;

export type ServiceAgreementCreatedEventFilter =
  TypedEventFilter<ServiceAgreementCreatedEvent>;

export interface ServiceAgreementUpdatedEventObject {
  serviceAgreementId: BigNumber;
  serviceOfferId: number;
  purchaser: string;
  seller: string;
  token: string;
}
export type ServiceAgreementUpdatedEvent = TypedEvent<
  [BigNumber, number, string, string, string],
  ServiceAgreementUpdatedEventObject
>;

export type ServiceAgreementUpdatedEventFilter =
  TypedEventFilter<ServiceAgreementUpdatedEvent>;

export interface ServiceOfferCreatedEventObject {
  networkId: string;
  serviceOfferId: number;
}
export type ServiceOfferCreatedEvent = TypedEvent<
  [string, number],
  ServiceOfferCreatedEventObject
>;

export type ServiceOfferCreatedEventFilter =
  TypedEventFilter<ServiceOfferCreatedEvent>;

export interface ServiceOfferDeletedEventObject {
  networkId: string;
  serviceOfferId: number;
}
export type ServiceOfferDeletedEvent = TypedEvent<
  [string, number],
  ServiceOfferDeletedEventObject
>;

export type ServiceOfferDeletedEventFilter =
  TypedEventFilter<ServiceOfferDeletedEvent>;

export interface ServiceOfferUpdatedEventObject {
  networkId: string;
  serviceOfferId: number;
}
export type ServiceOfferUpdatedEvent = TypedEvent<
  [string, number],
  ServiceOfferUpdatedEventObject
>;

export type ServiceOfferUpdatedEventFilter =
  TypedEventFilter<ServiceOfferUpdatedEvent>;

export interface IServices extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IServicesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelSubscription(
      agreementId: PromiseOrValue<BigNumberish>,
      offerPurchaser: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createServiceOffer(
      createOfferData: Services.ServiceOfferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteServiceOffer(
      serviceOfferId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getNumberOfActiveAgreements(
      serviceOfferId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOfferAgreements(
      serviceOfferId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Services.ServiceAgreementResponseStructOutput[]]>;

    getPaginatedNetworkServiceOffers(
      networkId: PromiseOrValue<BytesLike>,
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Services.ServiceOfferResponseStructOutput[], number]>;

    getPaginatedServiceAgreements(
      networkId: PromiseOrValue<BytesLike>,
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Services.ServiceAgreementResponseStructOutput[], BigNumber]>;

    getPaginatedServiceOffers(
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Services.ServiceOfferResponseStructOutput[], number]>;

    getPurchasedAgreements(
      networkId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[Services.ServiceAgreementResponseStructOutput[]]>;

    getServiceAgreement(
      agreementId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Services.ServiceAgreementResponseStructOutput]>;

    getServiceOfferById(
      serviceOfferId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Services.ServiceOfferResponseStructOutput]>;

    getSoldAgreements(
      networkId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[Services.ServiceAgreementResponseStructOutput[]]>;

    pricingStep(overrides?: CallOverrides): Promise<[BigNumber]>;

    purchase(
      purchaseAgreementData: Services.PurchaseAgreementDataStruct,
      fromRadomBalance: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeSubscription(
      agreementId: PromiseOrValue<BigNumberish>,
      serviceOfferId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAgreementConfig(
      updateData: Services.UpdateAgreementConfigDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAgreementPricingSelection(
      updateData: Services.UpdateAgreementPricingSelectionDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateServiceOffer(
      serviceOfferId: PromiseOrValue<BigNumberish>,
      updateOfferData: Services.UpdateServiceOfferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  cancelSubscription(
    agreementId: PromiseOrValue<BigNumberish>,
    offerPurchaser: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createServiceOffer(
    createOfferData: Services.ServiceOfferDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteServiceOffer(
    serviceOfferId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getNumberOfActiveAgreements(
    serviceOfferId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOfferAgreements(
    serviceOfferId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Services.ServiceAgreementResponseStructOutput[]>;

  getPaginatedNetworkServiceOffers(
    networkId: PromiseOrValue<BytesLike>,
    offset: PromiseOrValue<BigNumberish>,
    limit: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[Services.ServiceOfferResponseStructOutput[], number]>;

  getPaginatedServiceAgreements(
    networkId: PromiseOrValue<BytesLike>,
    offset: PromiseOrValue<BigNumberish>,
    limit: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[Services.ServiceAgreementResponseStructOutput[], BigNumber]>;

  getPaginatedServiceOffers(
    offset: PromiseOrValue<BigNumberish>,
    limit: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[Services.ServiceOfferResponseStructOutput[], number]>;

  getPurchasedAgreements(
    networkId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<Services.ServiceAgreementResponseStructOutput[]>;

  getServiceAgreement(
    agreementId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Services.ServiceAgreementResponseStructOutput>;

  getServiceOfferById(
    serviceOfferId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Services.ServiceOfferResponseStructOutput>;

  getSoldAgreements(
    networkId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<Services.ServiceAgreementResponseStructOutput[]>;

  pricingStep(overrides?: CallOverrides): Promise<BigNumber>;

  purchase(
    purchaseAgreementData: Services.PurchaseAgreementDataStruct,
    fromRadomBalance: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeSubscription(
    agreementId: PromiseOrValue<BigNumberish>,
    serviceOfferId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAgreementConfig(
    updateData: Services.UpdateAgreementConfigDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAgreementPricingSelection(
    updateData: Services.UpdateAgreementPricingSelectionDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateServiceOffer(
    serviceOfferId: PromiseOrValue<BigNumberish>,
    updateOfferData: Services.UpdateServiceOfferDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelSubscription(
      agreementId: PromiseOrValue<BigNumberish>,
      offerPurchaser: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    createServiceOffer(
      createOfferData: Services.ServiceOfferDataStruct,
      overrides?: CallOverrides
    ): Promise<number>;

    deleteServiceOffer(
      serviceOfferId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getNumberOfActiveAgreements(
      serviceOfferId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOfferAgreements(
      serviceOfferId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Services.ServiceAgreementResponseStructOutput[]>;

    getPaginatedNetworkServiceOffers(
      networkId: PromiseOrValue<BytesLike>,
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Services.ServiceOfferResponseStructOutput[], number]>;

    getPaginatedServiceAgreements(
      networkId: PromiseOrValue<BytesLike>,
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Services.ServiceAgreementResponseStructOutput[], BigNumber]>;

    getPaginatedServiceOffers(
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Services.ServiceOfferResponseStructOutput[], number]>;

    getPurchasedAgreements(
      networkId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<Services.ServiceAgreementResponseStructOutput[]>;

    getServiceAgreement(
      agreementId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Services.ServiceAgreementResponseStructOutput>;

    getServiceOfferById(
      serviceOfferId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Services.ServiceOfferResponseStructOutput>;

    getSoldAgreements(
      networkId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<Services.ServiceAgreementResponseStructOutput[]>;

    pricingStep(overrides?: CallOverrides): Promise<BigNumber>;

    purchase(
      purchaseAgreementData: Services.PurchaseAgreementDataStruct,
      fromRadomBalance: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeSubscription(
      agreementId: PromiseOrValue<BigNumberish>,
      serviceOfferId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAgreementConfig(
      updateData: Services.UpdateAgreementConfigDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAgreementPricingSelection(
      updateData: Services.UpdateAgreementPricingSelectionDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updateServiceOffer(
      serviceOfferId: PromiseOrValue<BigNumberish>,
      updateOfferData: Services.UpdateServiceOfferDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OneTimePurchaseSuccessful(uint160,address,address,address)"(
      serviceOfferId?: PromiseOrValue<BigNumberish> | null,
      purchaser?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null,
      token?: null
    ): OneTimePurchaseSuccessfulEventFilter;
    OneTimePurchaseSuccessful(
      serviceOfferId?: PromiseOrValue<BigNumberish> | null,
      purchaser?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null,
      token?: null
    ): OneTimePurchaseSuccessfulEventFilter;

    "ServiceAgreementCancelled(uint64,uint32,address,address,address,uint256,bool)"(
      serviceAgreementId?: null,
      serviceOfferId?: PromiseOrValue<BigNumberish> | null,
      purchaser?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null,
      token?: null,
      userExpiryTimestamp?: null,
      revoked?: null
    ): ServiceAgreementCancelledEventFilter;
    ServiceAgreementCancelled(
      serviceAgreementId?: null,
      serviceOfferId?: PromiseOrValue<BigNumberish> | null,
      purchaser?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null,
      token?: null,
      userExpiryTimestamp?: null,
      revoked?: null
    ): ServiceAgreementCancelledEventFilter;

    "ServiceAgreementCreated(uint64,uint32,address,address,address)"(
      serviceAgreementId?: null,
      serviceOfferId?: PromiseOrValue<BigNumberish> | null,
      purchaser?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null,
      token?: null
    ): ServiceAgreementCreatedEventFilter;
    ServiceAgreementCreated(
      serviceAgreementId?: null,
      serviceOfferId?: PromiseOrValue<BigNumberish> | null,
      purchaser?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null,
      token?: null
    ): ServiceAgreementCreatedEventFilter;

    "ServiceAgreementUpdated(uint64,uint32,address,address,address)"(
      serviceAgreementId?: null,
      serviceOfferId?: PromiseOrValue<BigNumberish> | null,
      purchaser?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null,
      token?: null
    ): ServiceAgreementUpdatedEventFilter;
    ServiceAgreementUpdated(
      serviceAgreementId?: null,
      serviceOfferId?: PromiseOrValue<BigNumberish> | null,
      purchaser?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null,
      token?: null
    ): ServiceAgreementUpdatedEventFilter;

    "ServiceOfferCreated(address,uint32)"(
      networkId?: PromiseOrValue<string> | null,
      serviceOfferId?: PromiseOrValue<BigNumberish> | null
    ): ServiceOfferCreatedEventFilter;
    ServiceOfferCreated(
      networkId?: PromiseOrValue<string> | null,
      serviceOfferId?: PromiseOrValue<BigNumberish> | null
    ): ServiceOfferCreatedEventFilter;

    "ServiceOfferDeleted(address,uint32)"(
      networkId?: PromiseOrValue<string> | null,
      serviceOfferId?: PromiseOrValue<BigNumberish> | null
    ): ServiceOfferDeletedEventFilter;
    ServiceOfferDeleted(
      networkId?: PromiseOrValue<string> | null,
      serviceOfferId?: PromiseOrValue<BigNumberish> | null
    ): ServiceOfferDeletedEventFilter;

    "ServiceOfferUpdated(address,uint32)"(
      networkId?: PromiseOrValue<string> | null,
      serviceOfferId?: PromiseOrValue<BigNumberish> | null
    ): ServiceOfferUpdatedEventFilter;
    ServiceOfferUpdated(
      networkId?: PromiseOrValue<string> | null,
      serviceOfferId?: PromiseOrValue<BigNumberish> | null
    ): ServiceOfferUpdatedEventFilter;
  };

  estimateGas: {
    cancelSubscription(
      agreementId: PromiseOrValue<BigNumberish>,
      offerPurchaser: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createServiceOffer(
      createOfferData: Services.ServiceOfferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteServiceOffer(
      serviceOfferId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getNumberOfActiveAgreements(
      serviceOfferId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOfferAgreements(
      serviceOfferId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaginatedNetworkServiceOffers(
      networkId: PromiseOrValue<BytesLike>,
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaginatedServiceAgreements(
      networkId: PromiseOrValue<BytesLike>,
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaginatedServiceOffers(
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPurchasedAgreements(
      networkId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getServiceAgreement(
      agreementId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getServiceOfferById(
      serviceOfferId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSoldAgreements(
      networkId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pricingStep(overrides?: CallOverrides): Promise<BigNumber>;

    purchase(
      purchaseAgreementData: Services.PurchaseAgreementDataStruct,
      fromRadomBalance: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeSubscription(
      agreementId: PromiseOrValue<BigNumberish>,
      serviceOfferId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAgreementConfig(
      updateData: Services.UpdateAgreementConfigDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAgreementPricingSelection(
      updateData: Services.UpdateAgreementPricingSelectionDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateServiceOffer(
      serviceOfferId: PromiseOrValue<BigNumberish>,
      updateOfferData: Services.UpdateServiceOfferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelSubscription(
      agreementId: PromiseOrValue<BigNumberish>,
      offerPurchaser: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createServiceOffer(
      createOfferData: Services.ServiceOfferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteServiceOffer(
      serviceOfferId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getNumberOfActiveAgreements(
      serviceOfferId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOfferAgreements(
      serviceOfferId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPaginatedNetworkServiceOffers(
      networkId: PromiseOrValue<BytesLike>,
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPaginatedServiceAgreements(
      networkId: PromiseOrValue<BytesLike>,
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPaginatedServiceOffers(
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPurchasedAgreements(
      networkId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getServiceAgreement(
      agreementId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getServiceOfferById(
      serviceOfferId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSoldAgreements(
      networkId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pricingStep(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchase(
      purchaseAgreementData: Services.PurchaseAgreementDataStruct,
      fromRadomBalance: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeSubscription(
      agreementId: PromiseOrValue<BigNumberish>,
      serviceOfferId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAgreementConfig(
      updateData: Services.UpdateAgreementConfigDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAgreementPricingSelection(
      updateData: Services.UpdateAgreementPricingSelectionDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateServiceOffer(
      serviceOfferId: PromiseOrValue<BigNumberish>,
      updateOfferData: Services.UpdateServiceOfferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
