/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace Automation {
  export type DepositConfigStruct = {
    useRadomBalanceForMeteredCharge: PromiseOrValue<boolean>;
    disableAutoDeposit: PromiseOrValue<boolean>;
    minimumTimeUntilExpire: PromiseOrValue<BigNumberish>;
    minimumDuration: PromiseOrValue<BigNumberish>;
  };

  export type DepositConfigStructOutput = [boolean, boolean, number, number] & {
    useRadomBalanceForMeteredCharge: boolean;
    disableAutoDeposit: boolean;
    minimumTimeUntilExpire: number;
    minimumDuration: number;
  };
}

export declare namespace Billing {
  export type ProductStruct = {
    productType: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<BytesLike>;
  };

  export type ProductStructOutput = [number, string] & {
    productType: number;
    data: string;
  };

  export type OrderStruct = {
    customer: PromiseOrValue<string>;
    seller: PromiseOrValue<string>;
    token: PromiseOrValue<string>;
    chainId: PromiseOrValue<BigNumberish>;
    products: Billing.ProductStruct[];
  };

  export type OrderStructOutput = [
    string,
    string,
    string,
    BigNumber,
    Billing.ProductStructOutput[]
  ] & {
    customer: string;
    seller: string;
    token: string;
    chainId: BigNumber;
    products: Billing.ProductStructOutput[];
  };

  export type KeyValuePairStruct = {
    key: PromiseOrValue<BytesLike>;
    value: PromiseOrValue<BytesLike>;
  };

  export type KeyValuePairStructOutput = [string, string] & {
    key: string;
    value: string;
  };
}

export interface IAutomationInterface extends utils.Interface {
  functions: {
    "deleteAutoDepositConfig(address)": FunctionFragment;
    "getAutoDepositConfig(address)": FunctionFragment;
    "subscriptionIsEligibleForAutoDeposit(uint64)": FunctionFragment;
    "triggerAutoDeposit(address,address,uint64[])": FunctionFragment;
    "updateAutoDepositConfig(address,(bool,bool,uint32,uint32))": FunctionFragment;
    "updateAutoDepositConfigAndDeposit((bool,bool,uint32,uint32),address,address,uint256)": FunctionFragment;
    "updateAutoDepositConfigAndDepositAndOrder((address,address,address,uint256,(uint32,bytes)[]),bool,(bytes32,bytes)[],(bool,bool,uint32,uint32),uint256)": FunctionFragment;
    "updateAutoDepositConfigAndOrder((address,address,address,uint256,(uint32,bytes)[]),bool,(bytes32,bytes)[],(bool,bool,uint32,uint32))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deleteAutoDepositConfig"
      | "getAutoDepositConfig"
      | "subscriptionIsEligibleForAutoDeposit"
      | "triggerAutoDeposit"
      | "updateAutoDepositConfig"
      | "updateAutoDepositConfigAndDeposit"
      | "updateAutoDepositConfigAndDepositAndOrder"
      | "updateAutoDepositConfigAndOrder"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deleteAutoDepositConfig",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAutoDepositConfig",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionIsEligibleForAutoDeposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "triggerAutoDeposit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAutoDepositConfig",
    values: [PromiseOrValue<string>, Automation.DepositConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAutoDepositConfigAndDeposit",
    values: [
      Automation.DepositConfigStruct,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAutoDepositConfigAndDepositAndOrder",
    values: [
      Billing.OrderStruct,
      PromiseOrValue<boolean>,
      Billing.KeyValuePairStruct[],
      Automation.DepositConfigStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAutoDepositConfigAndOrder",
    values: [
      Billing.OrderStruct,
      PromiseOrValue<boolean>,
      Billing.KeyValuePairStruct[],
      Automation.DepositConfigStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "deleteAutoDepositConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAutoDepositConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionIsEligibleForAutoDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerAutoDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAutoDepositConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAutoDepositConfigAndDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAutoDepositConfigAndDepositAndOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAutoDepositConfigAndOrder",
    data: BytesLike
  ): Result;

  events: {
    "AutoDepositConfigDeleted(address)": EventFragment;
    "AutoDepositConfigUpdated(address,tuple)": EventFragment;
    "AutoDepositTriggered(address,address,uint64[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AutoDepositConfigDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AutoDepositConfigUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AutoDepositTriggered"): EventFragment;
}

export interface AutoDepositConfigDeletedEventObject {
  customer: string;
}
export type AutoDepositConfigDeletedEvent = TypedEvent<
  [string],
  AutoDepositConfigDeletedEventObject
>;

export type AutoDepositConfigDeletedEventFilter =
  TypedEventFilter<AutoDepositConfigDeletedEvent>;

export interface AutoDepositConfigUpdatedEventObject {
  customer: string;
  depositConfig: Automation.DepositConfigStructOutput;
}
export type AutoDepositConfigUpdatedEvent = TypedEvent<
  [string, Automation.DepositConfigStructOutput],
  AutoDepositConfigUpdatedEventObject
>;

export type AutoDepositConfigUpdatedEventFilter =
  TypedEventFilter<AutoDepositConfigUpdatedEvent>;

export interface AutoDepositTriggeredEventObject {
  customer: string;
  token: string;
  subscriptionIds: BigNumber[];
}
export type AutoDepositTriggeredEvent = TypedEvent<
  [string, string, BigNumber[]],
  AutoDepositTriggeredEventObject
>;

export type AutoDepositTriggeredEventFilter =
  TypedEventFilter<AutoDepositTriggeredEvent>;

export interface IAutomation extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAutomationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deleteAutoDepositConfig(
      customer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAutoDepositConfig(
      customer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[Automation.DepositConfigStructOutput]>;

    subscriptionIsEligibleForAutoDeposit(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { isSuccessful: boolean; failedReason: string }
    >;

    triggerAutoDeposit(
      customer: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      subscriptionIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAutoDepositConfig(
      customer: PromiseOrValue<string>,
      depositConfig: Automation.DepositConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAutoDepositConfigAndDeposit(
      depositUpdate: Automation.DepositConfigStruct,
      customer: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAutoDepositConfigAndDepositAndOrder(
      orderData: Billing.OrderStruct,
      fromRadomBalance: PromiseOrValue<boolean>,
      metadata: Billing.KeyValuePairStruct[],
      depositConfig: Automation.DepositConfigStruct,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAutoDepositConfigAndOrder(
      orderData: Billing.OrderStruct,
      fromRadomBalance: PromiseOrValue<boolean>,
      metadata: Billing.KeyValuePairStruct[],
      depositConfig: Automation.DepositConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  deleteAutoDepositConfig(
    customer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAutoDepositConfig(
    customer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<Automation.DepositConfigStructOutput>;

  subscriptionIsEligibleForAutoDeposit(
    subscriptionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string] & { isSuccessful: boolean; failedReason: string }
  >;

  triggerAutoDeposit(
    customer: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    subscriptionIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAutoDepositConfig(
    customer: PromiseOrValue<string>,
    depositConfig: Automation.DepositConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAutoDepositConfigAndDeposit(
    depositUpdate: Automation.DepositConfigStruct,
    customer: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAutoDepositConfigAndDepositAndOrder(
    orderData: Billing.OrderStruct,
    fromRadomBalance: PromiseOrValue<boolean>,
    metadata: Billing.KeyValuePairStruct[],
    depositConfig: Automation.DepositConfigStruct,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAutoDepositConfigAndOrder(
    orderData: Billing.OrderStruct,
    fromRadomBalance: PromiseOrValue<boolean>,
    metadata: Billing.KeyValuePairStruct[],
    depositConfig: Automation.DepositConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deleteAutoDepositConfig(
      customer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAutoDepositConfig(
      customer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<Automation.DepositConfigStructOutput>;

    subscriptionIsEligibleForAutoDeposit(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { isSuccessful: boolean; failedReason: string }
    >;

    triggerAutoDeposit(
      customer: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      subscriptionIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateAutoDepositConfig(
      customer: PromiseOrValue<string>,
      depositConfig: Automation.DepositConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAutoDepositConfigAndDeposit(
      depositUpdate: Automation.DepositConfigStruct,
      customer: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAutoDepositConfigAndDepositAndOrder(
      orderData: Billing.OrderStruct,
      fromRadomBalance: PromiseOrValue<boolean>,
      metadata: Billing.KeyValuePairStruct[],
      depositConfig: Automation.DepositConfigStruct,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAutoDepositConfigAndOrder(
      orderData: Billing.OrderStruct,
      fromRadomBalance: PromiseOrValue<boolean>,
      metadata: Billing.KeyValuePairStruct[],
      depositConfig: Automation.DepositConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AutoDepositConfigDeleted(address)"(
      customer?: PromiseOrValue<string> | null
    ): AutoDepositConfigDeletedEventFilter;
    AutoDepositConfigDeleted(
      customer?: PromiseOrValue<string> | null
    ): AutoDepositConfigDeletedEventFilter;

    "AutoDepositConfigUpdated(address,tuple)"(
      customer?: PromiseOrValue<string> | null,
      depositConfig?: null
    ): AutoDepositConfigUpdatedEventFilter;
    AutoDepositConfigUpdated(
      customer?: PromiseOrValue<string> | null,
      depositConfig?: null
    ): AutoDepositConfigUpdatedEventFilter;

    "AutoDepositTriggered(address,address,uint64[])"(
      customer?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      subscriptionIds?: null
    ): AutoDepositTriggeredEventFilter;
    AutoDepositTriggered(
      customer?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      subscriptionIds?: null
    ): AutoDepositTriggeredEventFilter;
  };

  estimateGas: {
    deleteAutoDepositConfig(
      customer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAutoDepositConfig(
      customer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    subscriptionIsEligibleForAutoDeposit(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    triggerAutoDeposit(
      customer: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      subscriptionIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAutoDepositConfig(
      customer: PromiseOrValue<string>,
      depositConfig: Automation.DepositConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAutoDepositConfigAndDeposit(
      depositUpdate: Automation.DepositConfigStruct,
      customer: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAutoDepositConfigAndDepositAndOrder(
      orderData: Billing.OrderStruct,
      fromRadomBalance: PromiseOrValue<boolean>,
      metadata: Billing.KeyValuePairStruct[],
      depositConfig: Automation.DepositConfigStruct,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAutoDepositConfigAndOrder(
      orderData: Billing.OrderStruct,
      fromRadomBalance: PromiseOrValue<boolean>,
      metadata: Billing.KeyValuePairStruct[],
      depositConfig: Automation.DepositConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deleteAutoDepositConfig(
      customer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAutoDepositConfig(
      customer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    subscriptionIsEligibleForAutoDeposit(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    triggerAutoDeposit(
      customer: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      subscriptionIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAutoDepositConfig(
      customer: PromiseOrValue<string>,
      depositConfig: Automation.DepositConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAutoDepositConfigAndDeposit(
      depositUpdate: Automation.DepositConfigStruct,
      customer: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAutoDepositConfigAndDepositAndOrder(
      orderData: Billing.OrderStruct,
      fromRadomBalance: PromiseOrValue<boolean>,
      metadata: Billing.KeyValuePairStruct[],
      depositConfig: Automation.DepositConfigStruct,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAutoDepositConfigAndOrder(
      orderData: Billing.OrderStruct,
      fromRadomBalance: PromiseOrValue<boolean>,
      metadata: Billing.KeyValuePairStruct[],
      depositConfig: Automation.DepositConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
