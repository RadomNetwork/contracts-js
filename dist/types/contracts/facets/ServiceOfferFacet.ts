/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace Services {
  export type PricingOptionStruct = {
    key: PromiseOrValue<BytesLike>;
    disabled: PromiseOrValue<boolean>;
    price: PromiseOrValue<BigNumberish>;
  };

  export type PricingOptionStructOutput = [string, boolean, BigNumber] & {
    key: string;
    disabled: boolean;
    price: BigNumber;
  };

  export type PricingInputStruct = {
    key: PromiseOrValue<BytesLike>;
    canBeUpdated: PromiseOrValue<boolean>;
    options: Services.PricingOptionStruct[];
  };

  export type PricingInputStructOutput = [
    string,
    boolean,
    Services.PricingOptionStructOutput[]
  ] & {
    key: string;
    canBeUpdated: boolean;
    options: Services.PricingOptionStructOutput[];
  };

  export type ServiceOfferDataStruct = {
    configInputs: PromiseOrValue<BytesLike>[];
    whitelist: PromiseOrValue<string>[];
    tokenExchangeRates: PromiseOrValue<BigNumberish>[];
    tokens: PromiseOrValue<string>[];
    pricing: PromiseOrValue<BigNumberish>;
    title2: PromiseOrValue<BytesLike>;
    title1: PromiseOrValue<BytesLike>;
    publicKey: PromiseOrValue<BytesLike>;
    description: PromiseOrValue<BytesLike>;
    chargeInterval: PromiseOrValue<BigNumberish>;
    offerEnabled: PromiseOrValue<boolean>;
    whitelistEnabled: PromiseOrValue<boolean>;
    authenticationType: PromiseOrValue<BigNumberish>;
    paymentModel: PromiseOrValue<BigNumberish>;
    pricingInputs: Services.PricingInputStruct[];
  };

  export type ServiceOfferDataStructOutput = [
    string[],
    string[],
    BigNumber[],
    string[],
    BigNumber,
    string,
    string,
    string,
    string,
    number,
    boolean,
    boolean,
    number,
    number,
    Services.PricingInputStructOutput[]
  ] & {
    configInputs: string[];
    whitelist: string[];
    tokenExchangeRates: BigNumber[];
    tokens: string[];
    pricing: BigNumber;
    title2: string;
    title1: string;
    publicKey: string;
    description: string;
    chargeInterval: number;
    offerEnabled: boolean;
    whitelistEnabled: boolean;
    authenticationType: number;
    paymentModel: number;
    pricingInputs: Services.PricingInputStructOutput[];
  };

  export type ServiceOfferResponseStruct = {
    configInputs: PromiseOrValue<BytesLike>[];
    whitelist: PromiseOrValue<string>[];
    tokenExchangeRates: PromiseOrValue<BigNumberish>[];
    tokens: PromiseOrValue<string>[];
    title2: PromiseOrValue<BytesLike>;
    title1: PromiseOrValue<BytesLike>;
    publicKey: PromiseOrValue<BytesLike>;
    description: PromiseOrValue<BytesLike>;
    pricing: PromiseOrValue<BigNumberish>;
    networkId: PromiseOrValue<BytesLike>;
    serviceOfferId: PromiseOrValue<BigNumberish>;
    chargeInterval: PromiseOrValue<BigNumberish>;
    offerEnabled: PromiseOrValue<boolean>;
    whitelistEnabled: PromiseOrValue<boolean>;
    authenticationType: PromiseOrValue<BigNumberish>;
    paymentModel: PromiseOrValue<BigNumberish>;
    pricingInputs: Services.PricingInputStruct[];
  };

  export type ServiceOfferResponseStructOutput = [
    string[],
    string[],
    BigNumber[],
    string[],
    string,
    string,
    string,
    string,
    BigNumber,
    string,
    number,
    number,
    boolean,
    boolean,
    number,
    number,
    Services.PricingInputStructOutput[]
  ] & {
    configInputs: string[];
    whitelist: string[];
    tokenExchangeRates: BigNumber[];
    tokens: string[];
    title2: string;
    title1: string;
    publicKey: string;
    description: string;
    pricing: BigNumber;
    networkId: string;
    serviceOfferId: number;
    chargeInterval: number;
    offerEnabled: boolean;
    whitelistEnabled: boolean;
    authenticationType: number;
    paymentModel: number;
    pricingInputs: Services.PricingInputStructOutput[];
  };

  export type UpdateServiceOfferDataStruct = {
    dataToUpdate: Services.ServiceOfferDataStruct;
    whitelistToRemove: PromiseOrValue<string>[];
    configInputsToRemove: PromiseOrValue<BytesLike>[];
    pricingInputsToRemove: PromiseOrValue<BytesLike>[];
  };

  export type UpdateServiceOfferDataStructOutput = [
    Services.ServiceOfferDataStructOutput,
    string[],
    string[],
    string[]
  ] & {
    dataToUpdate: Services.ServiceOfferDataStructOutput;
    whitelistToRemove: string[];
    configInputsToRemove: string[];
    pricingInputsToRemove: string[];
  };
}

export interface ServiceOfferFacetInterface extends utils.Interface {
  functions: {
    "createServiceOffer((bytes32[],address[],uint256[],address[],uint256,bytes32,bytes32,bytes,bytes,uint32,bool,bool,uint8,uint8,(bytes31,bool,(bytes31,bool,uint256)[])[]))": FunctionFragment;
    "deleteServiceOffer(uint32)": FunctionFragment;
    "getPaginatedNetworkServiceOffers(bytes20,uint32,uint32)": FunctionFragment;
    "getPaginatedServiceOffers(uint32,uint32)": FunctionFragment;
    "getServiceOfferById(uint32)": FunctionFragment;
    "updateServiceOffer(uint32,((bytes32[],address[],uint256[],address[],uint256,bytes32,bytes32,bytes,bytes,uint32,bool,bool,uint8,uint8,(bytes31,bool,(bytes31,bool,uint256)[])[]),address[],bytes32[],bytes31[]))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createServiceOffer"
      | "deleteServiceOffer"
      | "getPaginatedNetworkServiceOffers"
      | "getPaginatedServiceOffers"
      | "getServiceOfferById"
      | "updateServiceOffer"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createServiceOffer",
    values: [Services.ServiceOfferDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteServiceOffer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaginatedNetworkServiceOffers",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaginatedServiceOffers",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getServiceOfferById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateServiceOffer",
    values: [
      PromiseOrValue<BigNumberish>,
      Services.UpdateServiceOfferDataStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "createServiceOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteServiceOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaginatedNetworkServiceOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaginatedServiceOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getServiceOfferById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateServiceOffer",
    data: BytesLike
  ): Result;

  events: {
    "ServiceOfferCreated(address,uint32)": EventFragment;
    "ServiceOfferDeleted(address,uint32)": EventFragment;
    "ServiceOfferUpdated(address,uint32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ServiceOfferCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ServiceOfferDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ServiceOfferUpdated"): EventFragment;
}

export interface ServiceOfferCreatedEventObject {
  networkId: string;
  serviceOfferId: number;
}
export type ServiceOfferCreatedEvent = TypedEvent<
  [string, number],
  ServiceOfferCreatedEventObject
>;

export type ServiceOfferCreatedEventFilter =
  TypedEventFilter<ServiceOfferCreatedEvent>;

export interface ServiceOfferDeletedEventObject {
  networkId: string;
  serviceOfferId: number;
}
export type ServiceOfferDeletedEvent = TypedEvent<
  [string, number],
  ServiceOfferDeletedEventObject
>;

export type ServiceOfferDeletedEventFilter =
  TypedEventFilter<ServiceOfferDeletedEvent>;

export interface ServiceOfferUpdatedEventObject {
  networkId: string;
  serviceOfferId: number;
}
export type ServiceOfferUpdatedEvent = TypedEvent<
  [string, number],
  ServiceOfferUpdatedEventObject
>;

export type ServiceOfferUpdatedEventFilter =
  TypedEventFilter<ServiceOfferUpdatedEvent>;

export interface ServiceOfferFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ServiceOfferFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createServiceOffer(
      serviceOfferData: Services.ServiceOfferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteServiceOffer(
      serviceOfferId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPaginatedNetworkServiceOffers(
      networkId: PromiseOrValue<BytesLike>,
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Services.ServiceOfferResponseStructOutput[], number]>;

    getPaginatedServiceOffers(
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Services.ServiceOfferResponseStructOutput[], number]>;

    getServiceOfferById(
      serviceOfferId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Services.ServiceOfferResponseStructOutput]>;

    updateServiceOffer(
      serviceOfferId: PromiseOrValue<BigNumberish>,
      updateData: Services.UpdateServiceOfferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createServiceOffer(
    serviceOfferData: Services.ServiceOfferDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteServiceOffer(
    serviceOfferId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPaginatedNetworkServiceOffers(
    networkId: PromiseOrValue<BytesLike>,
    offset: PromiseOrValue<BigNumberish>,
    limit: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[Services.ServiceOfferResponseStructOutput[], number]>;

  getPaginatedServiceOffers(
    offset: PromiseOrValue<BigNumberish>,
    limit: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[Services.ServiceOfferResponseStructOutput[], number]>;

  getServiceOfferById(
    serviceOfferId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Services.ServiceOfferResponseStructOutput>;

  updateServiceOffer(
    serviceOfferId: PromiseOrValue<BigNumberish>,
    updateData: Services.UpdateServiceOfferDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createServiceOffer(
      serviceOfferData: Services.ServiceOfferDataStruct,
      overrides?: CallOverrides
    ): Promise<number>;

    deleteServiceOffer(
      serviceOfferId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getPaginatedNetworkServiceOffers(
      networkId: PromiseOrValue<BytesLike>,
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Services.ServiceOfferResponseStructOutput[], number]>;

    getPaginatedServiceOffers(
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Services.ServiceOfferResponseStructOutput[], number]>;

    getServiceOfferById(
      serviceOfferId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Services.ServiceOfferResponseStructOutput>;

    updateServiceOffer(
      serviceOfferId: PromiseOrValue<BigNumberish>,
      updateData: Services.UpdateServiceOfferDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ServiceOfferCreated(address,uint32)"(
      networkId?: PromiseOrValue<string> | null,
      serviceOfferId?: PromiseOrValue<BigNumberish> | null
    ): ServiceOfferCreatedEventFilter;
    ServiceOfferCreated(
      networkId?: PromiseOrValue<string> | null,
      serviceOfferId?: PromiseOrValue<BigNumberish> | null
    ): ServiceOfferCreatedEventFilter;

    "ServiceOfferDeleted(address,uint32)"(
      networkId?: PromiseOrValue<string> | null,
      serviceOfferId?: PromiseOrValue<BigNumberish> | null
    ): ServiceOfferDeletedEventFilter;
    ServiceOfferDeleted(
      networkId?: PromiseOrValue<string> | null,
      serviceOfferId?: PromiseOrValue<BigNumberish> | null
    ): ServiceOfferDeletedEventFilter;

    "ServiceOfferUpdated(address,uint32)"(
      networkId?: PromiseOrValue<string> | null,
      serviceOfferId?: PromiseOrValue<BigNumberish> | null
    ): ServiceOfferUpdatedEventFilter;
    ServiceOfferUpdated(
      networkId?: PromiseOrValue<string> | null,
      serviceOfferId?: PromiseOrValue<BigNumberish> | null
    ): ServiceOfferUpdatedEventFilter;
  };

  estimateGas: {
    createServiceOffer(
      serviceOfferData: Services.ServiceOfferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteServiceOffer(
      serviceOfferId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPaginatedNetworkServiceOffers(
      networkId: PromiseOrValue<BytesLike>,
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaginatedServiceOffers(
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getServiceOfferById(
      serviceOfferId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateServiceOffer(
      serviceOfferId: PromiseOrValue<BigNumberish>,
      updateData: Services.UpdateServiceOfferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createServiceOffer(
      serviceOfferData: Services.ServiceOfferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteServiceOffer(
      serviceOfferId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPaginatedNetworkServiceOffers(
      networkId: PromiseOrValue<BytesLike>,
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPaginatedServiceOffers(
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getServiceOfferById(
      serviceOfferId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateServiceOffer(
      serviceOfferId: PromiseOrValue<BigNumberish>,
      updateData: Services.UpdateServiceOfferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
