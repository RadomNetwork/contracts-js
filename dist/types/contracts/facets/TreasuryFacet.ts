/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface TreasuryFacetInterface extends utils.Interface {
  functions: {
    "deposit(bytes20,address,uint256)": FunctionFragment;
    "getAllTokenBalances(bytes20)": FunctionFragment;
    "getBuyAndSellBalances(bytes20,address)": FunctionFragment;
    "getBuyBalance(bytes20,address)": FunctionFragment;
    "getSellBalance(bytes20,address)": FunctionFragment;
    "getTokenSpendRateAndExpiry(bytes20,address)": FunctionFragment;
    "withdrawBuyBalance(bytes20,address,uint256,address)": FunctionFragment;
    "withdrawSellBalance(bytes20,address,uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deposit"
      | "getAllTokenBalances"
      | "getBuyAndSellBalances"
      | "getBuyBalance"
      | "getSellBalance"
      | "getTokenSpendRateAndExpiry"
      | "withdrawBuyBalance"
      | "withdrawSellBalance"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTokenBalances",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyAndSellBalances",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyBalance",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellBalance",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenSpendRateAndExpiry",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBuyBalance",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSellBalance",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllTokenBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyAndSellBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSellBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenSpendRateAndExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBuyBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSellBalance",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(address,address,uint256)": EventFragment;
    "InnerTransfer(address,address,address,uint256,uint256)": EventFragment;
    "WithdrawBuyBalance(address,address,uint256,address)": EventFragment;
    "WithdrawSellBalance(address,address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InnerTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawBuyBalance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawSellBalance"): EventFragment;
}

export interface DepositEventObject {
  networkId: string;
  token: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, string, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface InnerTransferEventObject {
  senderNetwork: string;
  recipientNetwork: string;
  token: string;
  amount: BigNumber;
  userExpiryTimestamp: BigNumber;
}
export type InnerTransferEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  InnerTransferEventObject
>;

export type InnerTransferEventFilter = TypedEventFilter<InnerTransferEvent>;

export interface WithdrawBuyBalanceEventObject {
  networkId: string;
  token: string;
  amount: BigNumber;
  recipient: string;
}
export type WithdrawBuyBalanceEvent = TypedEvent<
  [string, string, BigNumber, string],
  WithdrawBuyBalanceEventObject
>;

export type WithdrawBuyBalanceEventFilter =
  TypedEventFilter<WithdrawBuyBalanceEvent>;

export interface WithdrawSellBalanceEventObject {
  networkId: string;
  token: string;
  amount: BigNumber;
  recipient: string;
}
export type WithdrawSellBalanceEvent = TypedEvent<
  [string, string, BigNumber, string],
  WithdrawSellBalanceEventObject
>;

export type WithdrawSellBalanceEventFilter =
  TypedEventFilter<WithdrawSellBalanceEvent>;

export interface TreasuryFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TreasuryFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deposit(
      networkId: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllTokenBalances(
      networkId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[], BigNumber[]]>;

    getBuyAndSellBalances(
      networkId: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getBuyBalance(
      buyerOrgId: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSellBalance(
      networkId: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenSpendRateAndExpiry(
      orgId: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    withdrawBuyBalance(
      networkId: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      withdrawTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawSellBalance(
      networkId: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      withdrawTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  deposit(
    networkId: PromiseOrValue<BytesLike>,
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllTokenBalances(
    networkId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[], BigNumber[]]>;

  getBuyAndSellBalances(
    networkId: PromiseOrValue<BytesLike>,
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getBuyBalance(
    buyerOrgId: PromiseOrValue<BytesLike>,
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSellBalance(
    networkId: PromiseOrValue<BytesLike>,
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenSpendRateAndExpiry(
    orgId: PromiseOrValue<BytesLike>,
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  withdrawBuyBalance(
    networkId: PromiseOrValue<BytesLike>,
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    withdrawTo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawSellBalance(
    networkId: PromiseOrValue<BytesLike>,
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    withdrawTo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deposit(
      networkId: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllTokenBalances(
      networkId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[], BigNumber[]]>;

    getBuyAndSellBalances(
      networkId: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getBuyBalance(
      buyerOrgId: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellBalance(
      networkId: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenSpendRateAndExpiry(
      orgId: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    withdrawBuyBalance(
      networkId: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      withdrawTo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawSellBalance(
      networkId: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      withdrawTo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Deposit(address,address,uint256)"(
      networkId?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(
      networkId?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): DepositEventFilter;

    "InnerTransfer(address,address,address,uint256,uint256)"(
      senderNetwork?: PromiseOrValue<string> | null,
      recipientNetwork?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
      userExpiryTimestamp?: null
    ): InnerTransferEventFilter;
    InnerTransfer(
      senderNetwork?: PromiseOrValue<string> | null,
      recipientNetwork?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
      userExpiryTimestamp?: null
    ): InnerTransferEventFilter;

    "WithdrawBuyBalance(address,address,uint256,address)"(
      networkId?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
      recipient?: null
    ): WithdrawBuyBalanceEventFilter;
    WithdrawBuyBalance(
      networkId?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
      recipient?: null
    ): WithdrawBuyBalanceEventFilter;

    "WithdrawSellBalance(address,address,uint256,address)"(
      networkId?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
      recipient?: null
    ): WithdrawSellBalanceEventFilter;
    WithdrawSellBalance(
      networkId?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
      recipient?: null
    ): WithdrawSellBalanceEventFilter;
  };

  estimateGas: {
    deposit(
      networkId: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllTokenBalances(
      networkId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBuyAndSellBalances(
      networkId: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBuyBalance(
      buyerOrgId: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellBalance(
      networkId: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenSpendRateAndExpiry(
      orgId: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawBuyBalance(
      networkId: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      withdrawTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawSellBalance(
      networkId: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      withdrawTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deposit(
      networkId: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllTokenBalances(
      networkId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBuyAndSellBalances(
      networkId: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBuyBalance(
      buyerOrgId: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSellBalance(
      networkId: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenSpendRateAndExpiry(
      orgId: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawBuyBalance(
      networkId: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      withdrawTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawSellBalance(
      networkId: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      withdrawTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
